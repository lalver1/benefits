{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Project overview","text":"<p>This website provides technical documentation for the <code>benefits</code> application from the California Integrated Travel Project (Cal-ITP).</p> <p></p> <p>Cal-ITP Benefits is a web application that enables digital eligibility verification and enrollment for transit benefits onto transit riders\u2019 existing contactless debit and credit cards.</p> <p>The development of this publicly-accessible client is being managed by Caltrans\u2019 California Integrated Travel Project (Cal-ITP), in partnership with the California Department of Technology (CDT). From the Cal-ITP site:</p> <p>Our Cal-ITP Benefits web application streamlines the process for transit riders to instantly qualify for and receive discounts, starting with Monterey-Salinas Transit (MST), which offers a half-price Senior Fare. Now older adults (65+) who are able to electronically verify their identity are able to access MST\u2019s reduced fares without the hassle of paperwork.</p> <p>We worked with state partners on this product launch, and next we\u2019re working to bring youth, lower-income riders, veterans, people with disabilities, and others the same instant access to free or reduced fares across all California transit providers, without having to prove eligibility to each agency.</p>"},{"location":"#adoption-by-transit-agencies","title":"Adoption by transit agencies","text":"<p>The following California transit agencies have launched Cal-ITP Benefits for their riders, with the following enrollment pathway options:</p> Transit agency Older adults Agency card Veterans Initial agency launch Monterey-Salinas Transit Live Live Live 12/2021 Santa Barbara Metropolitan Transit District Live Live 10/2023 Sacramento Regional Transit District In test"},{"location":"#supported-enrollment-pathways","title":"Supported enrollment pathways","text":"<p>The Cal-ITP Benefits app supports the following enrollment pathways that use the corresponding eligibility verification methods:</p> Enrollment pathway Eligibility verification Status Launch Older adults Login.gov ID Proofed Live 08/2022 Agency cards Eligibility API Live 11/2022 Veterans Veteran Confirmation API Live 09/2023 Low-income CalFresh Confirm API In development <p>Read more about each enrollment pathway.</p>"},{"location":"#technical-and-security-details","title":"Technical and security details","text":"<p><code>benefits</code> is a Django 5 web application. The application talks to one or more Eligibility Verification APIs or authentication providers. These APIs and the application itself are designed for privacy and security of user information:</p> <ul> <li>The API communicates with signed and encrypted JSON Web Tokens containing only the most necessary of user data for the purpose of eligibility verification</li> <li>The application requires no user accounts and stores no information about the user</li> <li>Interaction with the application is anonymous, with only minimal event tracking for usage and problem analysis</li> </ul> <p>Running the application locally is possible with Docker and Docker Compose. Hosting information.</p> <p>The user interface and content is available in both English and Spanish. Additional language support is possible via Django\u2019s i18n and l10n features.</p> <p>The application communicates with external services like Littlepay via API calls and others like the Identity Gateway via redirects, both over the public internet. See all the system interconnections.</p>"},{"location":"#infrastructure","title":"Infrastructure","text":"<p>The Benefits application is deployed to Microsoft Azure. Traffic is encrypted between the user and the application, as well as between the application and external systems.</p> <p>The network is managed by the California Department of Technology (CDT), who provide a firewall and distributed denial-of-service (DDoS) protection.</p> <p>You can find more technical details on our infrastructure page.</p>"},{"location":"#data-storage","title":"Data storage","text":"<p>The Benefits application doesn\u2019t collect or store any user data directly, and we minimize the information exchanged between systems. The following information is temporarily stored in an encrypted session in the user\u2019s browser:</p> <ul> <li>The user\u2019s progress through an enrollment pathway</li> <li>Credentials for interacting with the eligibility verification services</li> </ul> <p>Sensitive user information exists in the following places:</p> <ul> <li>To enroll in a senior discount, users need to provide personal information to Login.gov.</li> <li>Users need to provide their credit or debit card information to our payment processor (Littlepay) to enroll in a discount.</li> </ul> <p>None of that information is accessible to the Benefits system/team.</p> <p>Learn more about the security/privacy practices of some of our third-party integrations:</p> <ul> <li>Amplitude</li> <li>Littlepay</li> <li>Login.gov</li> </ul> <p>Benefits collects analytics on usage, without any identifying information. You can find more details on our analytics page.</p>"},{"location":"#practices","title":"Practices","text":"<p>Dependabot immediately notifies the team of vulnerabilities in application dependencies.</p> <p>Upon doing new major integrations, features, or architectural changes, the Benefits team has a penetration test performed by a third party to ensure the security of the system.</p> <p>All code changes are reviewed by at least one other member of the engineering team, which is enforced through branch protections.</p>"},{"location":"configuration/","title":"Configuring the Benefits app","text":"<p>The Getting Started section and sample configuration values in the repository give enough detail to run the app locally, but further configuration is required before many of the integrations and features are active.</p> <p>There are two primary components of the application configuration:</p> <ul> <li>Overall app settings in environment variables</li> <li>Content and more specific configurations in the data migration file</li> </ul> <p>Many (but not all) of the environment variables are read into Django settings during application startup.</p> <p>The model objects defined in the data migration file are also loaded into and seed Django\u2019s database at application startup time.</p> <p>See the Setting secrets section for how to set secret values for a deployment.</p>"},{"location":"configuration/#django-settings","title":"Django settings","text":"<p>Settings file</p> <p><code>benefits/settings.py</code></p> <p>Django docs</p> <p>Django settings</p> <p>The Django entrypoint for production runs is defined in <code>benefits/wsgi.py</code>.</p> <p>This file names the module that tells Django which settings file to use:</p> <pre><code>import os\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"benefits.settings\")\n</code></pre> <p>Elsewhere, e.g. in <code>manage.py</code>, this same environment variable is set to ensure <code>benefits.settings</code> are loaded for every app command and run.</p>"},{"location":"configuration/#using-configuration-in-app-code","title":"Using configuration in app code","text":"<p>Django docs</p> <p>Using settings in Python code</p> <p>From within the application, the Django settings object and the Django models are the two interfaces for application code to read configuration data.</p> <p>Rather than importing the app\u2019s settings module, Django recommends importing the <code>django.conf.settings</code> object, which provides an abstraction and better handles default values:</p> <pre><code>from django.config import settings\n\n# ...\n\nif settings.DEBUG:\n    # do something when debug is enabled\nelse:\n    # do something else when debug is disabled\n</code></pre> <p>Through the Django model framework, <code>benefits.core.models</code> instances are used to access the configuration data:</p> <pre><code>from benefits.core.models import TransitAgency\n\nagency = TransitAgency.objects.get(short_name=\"ABC\")\n\nif agency.active:\n    # do something when this agency is active\nelse:\n    # do something when this agency is inactive\n</code></pre>"},{"location":"configuration/content-security-policy/","title":"Configuring the Content Security Policy","text":"<p>MDN docs</p> <p>The Mozilla Developer Network has more on Content Security Policy</p> <p>The HTTP <code>Content-Security-Policy</code> response header allows web site administrators to control resources the user agent is allowed to load for a given page.</p> <p>With a few exceptions, policies mostly involve specifying server origins and script endpoints. This helps guard against cross-site scripting attacks</p> <p>Strict CSP</p> <p>Benefits configures a Strict Content Security Policy. Read more about Strict CSP from Google: https://csp.withgoogle.com/docs/strict-csp.html.</p>"},{"location":"configuration/content-security-policy/#django-csp","title":"<code>django-csp</code>","text":"<p>django-csp docs</p> <p>Configuring <code>django-csp</code></p> <p>Benefits uses the open source <code>django-csp</code> library for helping to configure the correct response headers.</p>"},{"location":"configuration/content-security-policy/#environment-variables","title":"Environment Variables","text":""},{"location":"configuration/content-security-policy/#django_csp_connect_src","title":"<code>DJANGO_CSP_CONNECT_SRC</code>","text":"<p>Comma-separated list of URIs. Configures the <code>connect-src</code> Content Security Policy directive.</p>"},{"location":"configuration/content-security-policy/#django_csp_font_src","title":"<code>DJANGO_CSP_FONT_SRC</code>","text":"<p>Comma-separated list of URIs. Configures the <code>font-src</code> Content Security Policy directive.</p>"},{"location":"configuration/content-security-policy/#django_csp_frame_src","title":"<code>DJANGO_CSP_FRAME_SRC</code>","text":"<p>Comma-separated list of URIs. Configures the <code>frame-src</code> Content Security Policy directive.</p>"},{"location":"configuration/content-security-policy/#django_csp_script_src","title":"<code>DJANGO_CSP_SCRIPT_SRC</code>","text":"<p>Comma-separated list of URIs. Configures the <code>script-src</code> Content Security Policy directive.</p>"},{"location":"configuration/content-security-policy/#django_csp_style_src","title":"<code>DJANGO_CSP_STYLE_SRC</code>","text":"<p>Comma-separated list of URIs. Configures the <code>style-src</code> Content Security Policy directive.</p>"},{"location":"configuration/data/","title":"Configuration data","text":"<p>Sample data fixtures</p> <p><code>benefits/core/migrations/local_fixtures.json</code></p> <p>Django docs</p> <p>How to provide initial data for models</p>"},{"location":"configuration/data/#introduction","title":"Introduction","text":"<p>The app\u2019s model classes are defined in <code>benefits/core/models.py</code>.</p> <p>Migrations are run as the application starts up. See the <code>bin/init.sh</code> script.</p> <p>The sample values provided in the repository are sufficient to run the app locally and interact with e.g. the sample Transit Agencies. Django fixtures are used to load the database with sample data when running locally.</p> <p>During the deployment process, some environment-specific values are set in environment variables and read dynamically at runtime. Most configuration values are managed directly in the Django Admin interface at the <code>/admin</code> endpoint.</p>"},{"location":"configuration/data/#sample-data","title":"Sample data","text":"<p>The sample data included in the repository is enough to bootstrap the application with basic functionality:</p> <ul> <li>Multiple transit agency configurations</li> <li>Multiple eligibility verification pathways</li> <li>With and without authentication required before eligibility verification</li> <li>In concert with the sample eligibility server, verification with test user data</li> </ul>"},{"location":"configuration/data/#not-included","title":"Not included","text":"<p>Some configuration data is not available with the samples in the repository:</p> <ul> <li>OAuth configuration to enable authentication (read more about OAuth configuration)</li> <li>reCAPTCHA configuration for user-submitted forms</li> <li>Payment processor configuration for the enrollment phase</li> <li>Amplitude configuration for capturing analytics events</li> </ul>"},{"location":"configuration/data/#rebuilding-the-configuration-database-locally","title":"Rebuilding the configuration database locally","text":"<p>A local Django database will be initialized upon first startup of the devcontainer.</p> <p>To rebuild the local Django database, run the <code>bin/reset_db.sh</code> script from within the repository root, inside the devcontainer:</p> <pre><code>bin/reset_db.sh\n</code></pre> <p>See the Django Environment Variables section for details about how to configure the local database rebuild.</p>"},{"location":"configuration/environment-variables/","title":"Environment variables","text":"<p>The first steps of the Getting Started guide mention creating an <code>.env</code> file.</p> <p>The sections below outline in more detail the application environment variables that you may want to override, and their purpose. In Azure App Services, this is more generally called the \u201cconfiguration\u201d.</p> <p>See other topic pages in this section for more specific environment variable configurations.</p> <p>Multiline environment variables</p> <p>Although Docker, bash, etc. support multiline values directly in e.g. an .env file:</p> <pre><code>multi_line_value='first line\nsecond line\nthird line'\n</code></pre> <p>The VS Code Python extension does not parse multiline values: https://code.visualstudio.com/docs/python/environments#_environment-variables</p> <p>When specifying multiline values for local usage, use the literal newline character <code>\\n</code> but maintain the single quote wrapper:</p> <pre><code>multi_line_value='first line\\nsecond line\\third line'\n</code></pre> <p>A quick bash script to convert direct multiline values to their literal newline character equivalent is:</p> <pre><code>echo \"${multi_line_value//$'\\n'/\\\\n}\"\n</code></pre>"},{"location":"configuration/environment-variables/#amplitude","title":"Amplitude","text":"<p>Amplitude API docs</p> <p>Read more at https://developers.amplitude.com/docs/http-api-v2#request-format</p>"},{"location":"configuration/environment-variables/#analytics_key","title":"<code>ANALYTICS_KEY</code>","text":"<p>Deployment configuration</p> <p>You may change this setting when deploying the app to a non-localhost domain</p> <p>Amplitude API key for the project where the app will direct events.</p> <p>If blank or an invalid key, analytics events aren\u2019t captured (though may still be logged).</p>"},{"location":"configuration/environment-variables/#django","title":"Django","text":""},{"location":"configuration/environment-variables/#django_allowed_hosts","title":"<code>DJANGO_ALLOWED_HOSTS</code>","text":"<p>Deployment configuration</p> <p>You must change this setting when deploying the app to a non-localhost domain</p> <p>Django docs</p> <p>Settings: <code>ALLOWS_HOSTS</code></p> <p>A list of strings representing the host/domain names that this Django site can serve.</p>"},{"location":"configuration/environment-variables/#django_db_dir","title":"<code>DJANGO_DB_DIR</code>","text":"<p>Deployment configuration</p> <p>You may change this setting when deploying the app to a non-localhost domain</p> <p>The directory where Django creates its Sqlite database file. Must exist and be writable by the Django process.</p> <p>By default, the base project directory (i.e. the root of the repository).</p>"},{"location":"configuration/environment-variables/#django_db_file","title":"<code>DJANGO_DB_FILE</code>","text":"<p>Local configuration</p> <p>This setting only affects the app running on localhost</p> <p>The name of the Django database file to use locally (during both normal app startup and for resetting the database).</p> <p>By default, <code>django.db</code>.</p>"},{"location":"configuration/environment-variables/#django_db_fixtures","title":"<code>DJANGO_DB_FIXTURES</code>","text":"<p>Local configuration</p> <p>This setting only affects the app running on localhost</p> <p>A path, relative to the repository root, of Django data fixtures to load when resetting the database.</p> <p>The file must end in <code>fixtures.json</code> for the script to process it correctly.</p> <p>By default, <code>benefits/core/migrations/local_fixtures.json</code>.</p>"},{"location":"configuration/environment-variables/#django_db_reset","title":"<code>DJANGO_DB_RESET</code>","text":"<p>Local configuration</p> <p>This setting only affects the app running on localhost</p> <p>Boolean:</p> <ul> <li><code>True</code> (default): deletes the existing database file and runs fresh Django migrations.</li> <li><code>False</code>: Django uses the existing database file.</li> </ul>"},{"location":"configuration/environment-variables/#django_debug","title":"<code>DJANGO_DEBUG</code>","text":"<p>Deployment configuration</p> <p>Do not enable this in production</p> <p>Django docs</p> <p>Settings: <code>DEBUG</code></p> <p>Boolean:</p> <ul> <li><code>True</code>: the application is launched with debug mode turned on, allows pausing on breakpoints in the code, changes how static   files are served</li> <li><code>False</code> (default): the application is launched with debug mode turned off, similar to how it runs in production</li> </ul>"},{"location":"configuration/environment-variables/#django_local_port","title":"<code>DJANGO_LOCAL_PORT</code>","text":"<p>Local configuration</p> <p>This setting only affects the app running on localhost</p> <p>The port used to serve the Django application from the host machine (that is running the application container).</p> <p>i.e. if you are running the app in Docker on your local machine, this is the port that the app will be accessible from at http://localhost:$DJANGO_LOCAL_PORT</p> <p>From inside the container, the app is always listening on port <code>8000</code>.</p>"},{"location":"configuration/environment-variables/#django_log_level","title":"<code>DJANGO_LOG_LEVEL</code>","text":"<p>Deployment configuration</p> <p>You may change this setting when deploying the app to a non-localhost domain</p> <p>Django docs</p> <p>Settings: <code>LOGGING_CONFIG</code></p> <p>The log level used in the application\u2019s logging configuration.</p> <p>By default the application sends logs to <code>stdout</code>.</p>"},{"location":"configuration/environment-variables/#django_secret_key","title":"<code>DJANGO_SECRET_KEY</code>","text":"<p>Deployment configuration</p> <p>You must change this setting when deploying the app to a non-localhost domain</p> <p>Django docs</p> <p>Settings: <code>SECRET_KEY</code></p> <p>Django\u2019s primary secret, keep this safe!</p>"},{"location":"configuration/environment-variables/#django_superuser_email","title":"<code>DJANGO_SUPERUSER_EMAIL</code>","text":"<p>Local configuration</p> <p>This setting only affects the app running on localhost</p> <p>The email address of the Django Admin superuser created when resetting the database.</p>"},{"location":"configuration/environment-variables/#django_superuser_password","title":"<code>DJANGO_SUPERUSER_PASSWORD</code>","text":"<p>Local configuration</p> <p>This setting only affects the app running on localhost</p> <p>The password of the Django Admin superuser created when resetting the database.</p>"},{"location":"configuration/environment-variables/#django_superuser_username","title":"<code>DJANGO_SUPERUSER_USERNAME</code>","text":"<p>Local configuration</p> <p>This setting only affects the app running on localhost</p> <p>The username of the Django Admin superuser created when resetting the database.</p>"},{"location":"configuration/environment-variables/#django_trusted_origins","title":"<code>DJANGO_TRUSTED_ORIGINS</code>","text":"<p>Deployment configuration</p> <p>You must change this setting when deploying the app to a non-localhost domain</p> <p>Django docs</p> <p>Settings: <code>CSRF_TRUSTED_ORIGINS</code></p> <p>Comma-separated list of hosts which are trusted origins for unsafe requests (e.g. POST)</p>"},{"location":"configuration/environment-variables/#healthcheck_user_agents","title":"<code>HEALTHCHECK_USER_AGENTS</code>","text":"<p>Deployment configuration</p> <p>You must change this setting when deploying the app to a non-localhost domain</p> <p>Comma-separated list of User-Agent strings which, when present as an HTTP header, should only receive healthcheck responses. Used by our <code>HealthcheckUserAgents</code> middleware.</p>"},{"location":"configuration/environment-variables/#requests-configuration","title":"<code>requests</code> configuration","text":"<p><code>requests</code> docs</p> <p>Docs for timeouts</p>"},{"location":"configuration/environment-variables/#requests_connect_timeout","title":"<code>REQUESTS_CONNECT_TIMEOUT</code>","text":"<p>The number of seconds <code>requests</code> will wait for the client to establish a connection to a remote machine. Defaults to 3 seconds.</p>"},{"location":"configuration/environment-variables/#requests_read_timeout","title":"<code>REQUESTS_READ_TIMEOUT</code>","text":"<p>The number of seconds the client will wait for the server to send a response. Defaults to 1 second.</p>"},{"location":"configuration/environment-variables/#cypress-tests","title":"Cypress tests","text":"<p>Cypress docs</p> <p><code>CYPRESS_*</code> variables</p>"},{"location":"configuration/environment-variables/#cypress_baseurl","title":"<code>CYPRESS_baseUrl</code>","text":"<p>The base URL for the (running) application, against which all Cypress <code>.visit()</code> etc. commands are run.</p> <p>When Cypress is running inside the devcontainer, this should be <code>http://localhost:8000</code>. When Cypress is running outside the devcontainer, check the <code>DJANGO_LOCAL_PORT</code>.</p>"},{"location":"configuration/environment-variables/#sentry","title":"Sentry","text":""},{"location":"configuration/environment-variables/#sentry_dsn","title":"<code>SENTRY_DSN</code>","text":"<p>Sentry docs</p> <p>Data Source Name (DSN)</p> <p>Enables sending events to Sentry.</p>"},{"location":"configuration/environment-variables/#sentry_environment","title":"<code>SENTRY_ENVIRONMENT</code>","text":"<p>Sentry docs</p> <p><code>environment</code> config value</p> <p>Segments errors by which deployment they occur in. This defaults to <code>dev</code>, and can be set to match one of the environment names.</p> <p><code>local</code> may also be used for local testing of the Sentry integration.</p>"},{"location":"configuration/environment-variables/#sentry_report_uri","title":"<code>SENTRY_REPORT_URI</code>","text":"<p>Sentry docs</p> <p>Security Policy Reporting</p> <p>Collect information on Content-Security-Policy (CSP) violations. Read more about CSP configuration in Benefits.</p> <p>To enable report collection, set this env var to the authenticated Sentry endpoint.</p>"},{"location":"configuration/environment-variables/#sentry_traces_sample_rate","title":"<code>SENTRY_TRACES_SAMPLE_RATE</code>","text":"<p>Sentry docs</p> <p><code>traces_sample_rate</code></p> <p>Control the volume of transactions sent to Sentry. Value must be a float in the range <code>[0.0, 1.0]</code>.</p> <p>The default is <code>0.0</code> (i.e. no transactions are tracked).</p>"},{"location":"configuration/oauth/","title":"OAuth settings","text":"<p>Benefits can be configured to require users to authenticate with an OAuth Open ID Connect (OIDC) provider, before allowing the user to begin the Eligibility Verification process.</p> <p>This section describes the related settings and how to configure the application to enable this feature.</p>"},{"location":"configuration/oauth/#authlib","title":"Authlib","text":"<p>Authlib docs</p> <p>Read more about configuring Authlib for Django</p> <p>Benefits uses the open-source Authlib for OAuth and OIDC client implementation. See the Authlib docs for more details about what features are available. Specifically, from Authlib we:</p> <ol> <li>Create an OAuth client using the Django configuration</li> <li>Call <code>client.authorize_redirect()</code> to send the user into the OIDC server\u2019s authentication flow, with our authorization    callback URL</li> <li>Upon the user returning from the OIDC Server with an access token, call <code>client.authorize_access_token()</code> to get a validated    id token from the OIDC server</li> </ol>"},{"location":"configuration/oauth/#django-configuration","title":"Django configuration","text":"<p>OAuth settings are configured as instances of the <code>AuthProvider</code> model.</p> <p>The data migration file contains sample values for an <code>AuthProvider</code> configuration. You can set values for a real Open ID Connect provider in environment variables so that they are used instead of the sample values.</p>"},{"location":"configuration/oauth/#django-usage","title":"Django usage","text":"<p>The <code>benefits.oauth.client</code> module defines helpers for registering OAuth clients, and creating instances for use in e.g. views.</p> <ul> <li><code>register_providers(oauth_registry)</code> uses data from <code>AuthProvider</code> instances to register clients into the given registry</li> <li><code>oauth</code> is an <code>authlib.integrations.django_client.OAuth</code> instance</li> </ul> <p>Providers are registered into this instance once in the <code>OAuthAppConfig.ready()</code> function at application startup.</p> <p>Consumers call <code>oauth.create_client(client_name)</code> with the name of a previously registered client to obtain an Authlib client instance.</p>"},{"location":"configuration/rate-limit/","title":"Configuring Rate Limiting","text":"<p>The benefits application has a simple, single-configuration Rate Limit that acts per-IP to limit the number of consecutive requests in a given time period, via nginx <code>limit_req_zone</code> and <code>limit_req</code> directives.</p> <p>The configured rate limit is 12 requests/minute, or 1 request/5 seconds:</p> <pre><code>limit_req_zone $limit zone=rate_limit:10m rate=12r/m;\n</code></pre>"},{"location":"configuration/rate-limit/#http-method-selection","title":"HTTP method selection","text":"<p>An NGINX map variable lists HTTP methods that will be rate limited:</p> <pre><code>map $request_method $limit {\n    default         \"\";\n    POST            $binary_remote_addr;\n}\n</code></pre> <p>The <code>default</code> means don\u2019t apply a rate limit.</p> <p>To add a new method, add a new line:</p> <pre><code>map $request_method $limit {\n    default         \"\";\n    OPTIONS         $binary_remote_addr;\n    POST            $binary_remote_addr;\n}\n</code></pre>"},{"location":"configuration/rate-limit/#app-path-selection","title":"App path selection","text":"<p>The <code>limit_req</code> is applied to an NGINX <code>location</code> block with a case-insensitive regex to match paths:</p> <pre><code>location ~* ^/(eligibility/confirm)$ {\n    limit_req zone=rate_limit;\n    # config...\n}\n</code></pre> <p>To add a new path, add a regex OR <code>|</code> with the new path (omitting the leading slash):</p> <pre><code>location ~* ^/(eligibility/confirm|new/path)$ {\n    limit_req zone=rate_limit;\n    # config...\n}\n</code></pre>"},{"location":"configuration/recaptcha/","title":"Configuring reCAPTCHA","text":"<p>reCAPTCHA docs</p> <p>See the reCAPTCHA Developer\u2019s Guide for more information</p> <p>reCAPTCHA v3 is a free Google-provided service that helps protect the app from spam and abuse by using advanced risk analysis techniques to tell humans and bots apart.</p> <p>reCAPTCHA is applied to all forms in the Benefits app that collect user-provided information. Version 3 works silently in the background, with no additional interaction required by the user.</p>"},{"location":"configuration/recaptcha/#environment-variables","title":"Environment variables","text":"<p>Warning</p> <p>The following environment variables are all required to activate the reCAPTCHA feature</p>"},{"location":"configuration/recaptcha/#django_recaptcha_api_url","title":"<code>DJANGO_RECAPTCHA_API_URL</code>","text":"<p>URL to the reCAPTCHA JavaScript API library.</p> <p>By default, <code>https://www.google.com/recaptcha/api.js</code></p>"},{"location":"configuration/recaptcha/#django_recaptcha_site_key","title":"<code>DJANGO_RECAPTCHA_SITE_KEY</code>","text":"<p>Site key for the reCAPTCHA configuration.</p>"},{"location":"configuration/recaptcha/#django_recaptcha_secret_key","title":"<code>DJANGO_RECAPTCHA_SECRET_KEY</code>","text":"<p>Secret key for the reCAPTCHA configuration.</p>"},{"location":"configuration/recaptcha/#django_recaptcha_verify_url","title":"<code>DJANGO_RECAPTCHA_VERIFY_URL</code>","text":"<p>reCAPTCHA docs</p> <p>Verifying the user\u2019s response</p> <p>URL for the reCAPTCHA verify service.</p> <p>By default, <code>https://www.google.com/recaptcha/api/siteverify</code></p>"},{"location":"configuration/transit-agency/","title":"Configuring a new transit agency","text":"<p>Before starting any configuration, the Cal-ITP team and transit agency staff should have a kickoff meeting to confirm that information provided is complete, implementation plan is feasible, and any approvals needed have been obtained.</p> <p>Then, the following steps are done by the Cal-ITP team to configure a new transit agency in the Benefits application.</p> <p>Note that a <code>TransitAgency</code> model requires:</p> <ul> <li>a list of supported <code>EligibilityType</code>s</li> <li>a list of <code>EligibilityVerifier</code>s used to verify one of those supported eligibility types</li> <li>a <code>PaymentProcessor</code> for enrolling the user\u2019s contactless card for discounts</li> <li>an <code>info_url</code> and <code>phone</code> for users to contact customer service</li> <li>an SVG or PNG file of the transit agency\u2019s logo</li> <li>HTML templates for various buttons, text and other user interface elements of the flow, including:<ul> <li><code>index_template</code>: Required for agencies - Text for agency direct entry page</li> <li><code>eligibility_index_template</code>: Required for agencies - Text for Eligibility Index page</li> <li><code>enrollment_success_template</code>: Required for agencies - Text for Enrollment Success page</li> <li><code>help_template</code>: Required for agencies - Agency-specific help questions and answers</li> <li><code>selection_label_template</code>: Required for verifiers - Text and optional modals for the radio button form on the Eligibility Index page</li> <li><code>start_template</code>: Required for verifiers - Text and optional custom styles for call to action button on the Eligibility Start page</li> <li><code>sign_out_button_template</code>: Required for auth providers - Sign out link button, used on any page after sign in</li> <li><code>sign_out_link_template</code>: Required for auth providers - Sign out link text, used on any page after sign in</li> </ul> </li> </ul> <p>Also note that these steps assume the transit agency is using Littlepay as their payment processor. Support for integration with other payment processors may be added in the future.</p>"},{"location":"configuration/transit-agency/#configuration-for-development-and-testing","title":"Configuration for development and testing","text":"<p>For development and testing, only a Littlepay customer group is needed since there is no need to interact with any discount product. (We don\u2019t have a way to tap a card against the QA system to trigger a discount and therefore have no reason to associate the group with any product.)</p>"},{"location":"configuration/transit-agency/#steps","title":"Steps","text":"<ol> <li>Cal-ITP uses the transit agency\u2019s Littlepay merchant ID to create a customer group in the Littlepay QA environment for each type of eligibility (e.g. senior).</li> <li>For each group that\u2019s created, a group ID will be returned and should be set as the <code>group_id</code> on a new <code>EligibilityType</code> in the Benefits database. (See Configuration data for more on loading the database.)</li> <li>Cal-ITP creates a new <code>EligibilityVerifier</code> in the database for each supported eligibility type. This will require configuration for either API-based verification or verification through an OAuth Open ID Connect provider (e.g. sandbox Login.gov) \u2013 either way, this resource should be meant for testing.</li> <li>Cal-ITP creates a new <code>TransitAgency</code> in the database and associates it with the new <code>EligibilityType</code>s and <code>EligibilityVerifier</code>s as well as the existing Littlepay <code>PaymentProcessor</code>.</li> </ol>"},{"location":"configuration/transit-agency/#configuration-for-production-validation","title":"Configuration for production validation","text":"<p>For production validation, both a customer group and discount product are needed. The customer group used here is a temporary one for testing only. Production validation is done against the Benefits test environment to avoid disruption of the production environment.</p>"},{"location":"configuration/transit-agency/#steps_1","title":"Steps","text":"<ol> <li>Transit agency staff creates the discount product in production Littlepay (if it does not already exist).</li> <li>Transit agency staff takes a screenshot of the discount product in the Merchant Portal, making sure the browser URL is visible, and sends that to Cal-ITP.</li> <li>Cal-ITP creates a customer group for testing purposes in production Littlepay.</li> <li>Cal-ITP associates the group with the product.</li> <li>Cal-ITP creates a new <code>EligibilityType</code> for testing purposes in the Benefits database and sets the <code>group_id</code> to the ID of the newly-created group.</li> <li>Cal-ITP creates a new <code>EligibilityVerifier</code> with configuration for a testing environment to ensure successful eligibility verification. (For example, use sandbox Login.gov instead of production Login.gov.)</li> <li>Cal-ITP creates a new <code>PaymentProcessor</code> for testing purposes with configuration for production Littlepay.</li> <li>Cal-ITP updates the existing <code>TransitAgency</code> (created previously) with associations to the eligibility types, verifiers, and payment processor that were just created for testing.</li> </ol> <p>At this point, Cal-ITP and transit agency staff can coordinate to do on-the-ground testing where a live card is tapped on a live payment validator.</p>"},{"location":"configuration/transit-agency/#production-validation-testing","title":"Production validation testing","text":"<ol> <li>Transit agency staff (or Cal-ITP staff) does live test in the field.</li> <li>Transit agency staff uses the Merchant Portal to verify the taps and discounts were successful.</li> <li>Cal-ITP uses logs from Azure to verify the user was associated to the customer group.</li> <li>Cal-ITP verifies that Amplitude analytic events are being sent.</li> </ol>"},{"location":"configuration/transit-agency/#configuration-for-production","title":"Configuration for production","text":"<p>Once production validation is done, the transit agency can be added to the production Benefits database.</p>"},{"location":"configuration/transit-agency/#steps_2","title":"Steps","text":"<ol> <li>Cal-ITP creates a customer group for production use in production Littlepay.</li> <li>Cal-ITP associates the group with the discount product created previously during production validation.</li> <li>Cal-ITP sets that group\u2019s ID as the <code>group_id</code> for a new <code>EligibilityType</code> in the Benefits database.</li> <li>Cal-ITP creates a new <code>EligibilityVerifier</code> with configuration for the production eligibility verification system.</li> <li>Cal-ITP creates a new <code>TransitAgency</code> in the database with proper associations to eligibility types, verifiers, and payment processor.</li> </ol>"},{"location":"configuration/transit-agency/#cleanup","title":"Cleanup","text":"<p>At this point, the customer group that was created in production Littlepay for testing purposes can be deleted. The temporary production validation objects in the Benefits database can also be deleted.</p> <ol> <li>Remove the association between the test customer group and discount product.</li> <li>Delete the test customer group.</li> <li>Remove temporary <code>EligibilityType</code>s, <code>EligibilityVerifier</code>s, and <code>PaymentProcessor</code> that were created in the Benefits test environment.</li> </ol>"},{"location":"deployment/","title":"Overview","text":"<p>The Benefits app is currently deployed into a Microsoft Azure account provided by California Department of Technology (CDT)\u2019s Office of Enterprise Technology (OET), a.k.a. the \u201cDevSecOps\u201d team. More specifically, it uses custom containers on Azure App Service. More about the infrastructure.</p>"},{"location":"deployment/#deployment-process","title":"Deployment process","text":"<p>The Django application gets built into a Docker image with NGINX and Gunicorn. SQLite is used within that same container to store configuration data; there is no external database.</p> <p>The application is deployed to an Azure Web App Container using three separate environments for <code>dev</code>, <code>test</code>, and <code>prod</code>.</p> <p>A GitHub Action per environment is responsible for building that branch\u2019s image and pushing to GitHub Container Registry (GHCR).</p> <p>GitHub POSTs a webhook to the Azure Web App when an image is published to GHCR, telling Azure to restart the app and pull the latest image.</p> <p>You can view what Git commit is deployed for a given environment by visitng the URL path <code>/static/sha.txt</code>.</p>"},{"location":"deployment/#configuration","title":"Configuration","text":"<p>Sensitive configuration settings are maintained as Application Configuration variables in Azure, referencing Azure Key Vault secrets. Other non-sensitive configuration is maintained directly in the configuration database via the Django Admin.</p>"},{"location":"deployment/#docker-images","title":"Docker images","text":"<p>Docker images for each of the deploy branches are available from GitHub Container Registry (GHCR):</p> <ul> <li>Repository Package page</li> <li>Image path: <code>ghcr.io/cal-itp/benefits</code></li> <li>Image tags: <code>dev</code>, <code>test</code>, <code>prod</code></li> </ul>"},{"location":"deployment/infrastructure/","title":"Infrastructure","text":"<p>The infrastructure is configured as code via Terraform, for various reasons.</p>"},{"location":"deployment/infrastructure/#architecture","title":"Architecture","text":""},{"location":"deployment/infrastructure/#system-interconnections","title":"System interconnections","text":"<pre><code>flowchart LR\n    benefits[Benefits application]\n    style benefits stroke-width:5px\n    recaptcha[Google reCAPTCHA]\n    rider((User's browser))\n    idg[Identity Gateway]\n    elig_server[Eligibility Server]\n    ac_data[(Agency Card data)]\n    cookies[(Cookies)]\n\n    benefits --&gt;|Errors| sentry\n    elig_server --&gt;|Errors| sentry\n\n    rider --&gt; benefits\n    rider --&gt;|Credentials and identity proofing| Login.gov\n    rider --&gt; recaptcha\n    rider --&gt;|Payment card info| Littlepay\n    rider --&gt;|Events| Amplitude\n    rider --&gt;|Session| cookies\n\n    benefits --&gt; idg\n    benefits &lt;--&gt; recaptcha\n    benefits --&gt;|Events| Amplitude\n    benefits --&gt;|Group enrollment| Littlepay\n    benefits --&gt; elig_server\n\n    subgraph \"Agency Cards (e.g. MST Courtesy Cards)\"\n    elig_server --&gt; ac_data\n    end\n\n    idg --&gt; Login.gov\n    Login.gov --&gt;|User attributes| idg\n    idg --&gt;|User attributes| benefits</code></pre>"},{"location":"deployment/infrastructure/#benefits-application","title":"Benefits application","text":"<pre><code>flowchart LR\n    internet[Public internet]\n    frontdoor[Front Door]\n    django[Django application]\n    interconnections[Other system interconnections]\n\n    internet --&gt; Cloudflare\n    Cloudflare --&gt; frontdoor\n    django &lt;--&gt; interconnections\n\n    subgraph Azure\n        frontdoor --&gt; NGINX\n\n        subgraph App Service\n            subgraph Custom container\n                direction TB\n                NGINX --&gt; django\n            end\n        end\n    end</code></pre> <p>Front Door also includes the Web Application Firewall (WAF) and handles TLS termination. Front Door is managed by the DevSecOps team.</p>"},{"location":"deployment/infrastructure/#ownership","title":"Ownership","text":"<p>The following things in Azure are managed by the California Department of Technology (CDT)\u2019s DevSecOps (OET) team:</p> <ul> <li>Subcriptions</li> <li>Resource Groups</li> <li>Networking</li> <li>Front Door<ul> <li>Web Application Firewall (WAF)</li> <li>Distributed denial-of-service (DDoS) protection</li> </ul> </li> <li>IAM</li> <li>Service connections</li> </ul>"},{"location":"deployment/infrastructure/#environments","title":"Environments","text":"<p>Within the <code>CDT Digital CA</code> directory (how to switch), there are two Subscriptions, with Resource Groups under each. Each environment corresponds to a single Resource Group, Terraform Workspace, and branch.</p> Environment Subscription Resource Group Workspace Branch Dev <code>CDT/ODI Development</code> <code>RG-CDT-PUB-VIP-CALITP-D-001</code> <code>dev</code> <code>dev</code> Test <code>CDT/ODI Development</code> <code>RG-CDT-PUB-VIP-CALITP-T-001</code> <code>test</code> <code>test</code> Prod <code>CDT/ODI Production</code> <code>RG-CDT-PUB-VIP-CALITP-P-001</code> <code>default</code> <code>prod</code> <p>All resources in these Resource Groups should be reflected in Terraform in this repository. The exceptions are:</p> <ul> <li>Secrets, such as values under Key Vault. <code>prevent_destroy</code> is used on these Resources.</li> <li>Things managed by DevSecOps</li> </ul> <p>You\u2019ll see these referenced in Terraform as data sources.</p> <p>For browsing the Azure portal, you can switch your <code>Default subscription filter</code>.</p>"},{"location":"deployment/infrastructure/#making-changes","title":"Making changes","text":"<p>Terraform is <code>plan</code>\u2018d when code is pushed to any branch on GitHub, then <code>apply</code>\u2018d when merged to <code>dev</code>. While other automation for this project is done through GitHub Actions, we use an Azure Pipeline (above) for a couple of reasons:</p> <ul> <li>Easier authentication with the Azure API using a service connnection</li> <li>Log output is hidden, avoiding accidentally leaking secrets</li> </ul>"},{"location":"deployment/infrastructure/#local-development","title":"Local development","text":"<ol> <li>Get access to the Azure account through the DevSecOps team.</li> <li> <p>Install dependencies:</p> <ul> <li>Azure CLI</li> <li>Terraform - see exact version in <code>deploy.yml</code></li> </ul> </li> <li> <p>Authenticate using the Azure CLI.</p> <pre><code>az login\n</code></pre> </li> <li> <p>Outside the dev container, navigate to the <code>terraform/</code> directory.</p> </li> <li> <p>Initialize Terraform. You can also use this script later to switch between environments.</p> <pre><code>./init.sh &lt;env&gt;\n</code></pre> </li> <li> <p>Create a local <code>terraform.tfvars</code> file (ignored by git) from the sample; fill in the <code>*_OBJECT_ID</code> variables with values from the Azure Pipeline definition.</p> </li> <li>Make changes to Terraform files.</li> <li> <p>Preview the changes, as necessary.</p> <pre><code>terraform plan\n</code></pre> </li> <li> <p>Submit the changes via pull request.</p> </li> </ol> <p>For Azure resources, you need to ignore changes to tags, since they are automatically created by Azure Policy.</p> <pre><code>lifecycle {\n  ignore_changes = [tags]\n}\n</code></pre>"},{"location":"deployment/infrastructure/#naming-conventions","title":"Naming conventions","text":"<p>The DevSecOps team sets the following naming convention for Resources:</p> <pre><code>&lt;&lt;Resource Type&gt;&gt;-&lt;&lt;Department&gt;&gt;-&lt;&lt;Public/Private&gt;&gt;-&lt;&lt;Project Category&gt;&gt;-&lt;&lt;Project Name&gt;&gt;-&lt;&lt;Region&gt;&gt;&lt;&lt;OS Type&gt;&gt;-&lt;&lt;Environment&gt;&gt;-&lt;&lt;Sequence Number&gt;&gt;\n</code></pre>"},{"location":"deployment/infrastructure/#sample-names","title":"Sample Names","text":"<ul> <li><code>RG-CDT-PUB-VIP-BNSCN-E-D-001</code></li> <li><code>ASP-CDT-PUB-VIP-BNSCN-EL-P-001</code></li> <li><code>AS-CDT-PUB-VIP-BNSCN-EL-D-001</code></li> </ul>"},{"location":"deployment/infrastructure/#resource-types","title":"Resource Types","text":"<p>Use the following shorthand for conveying the Resource Type as part of the Resource Name:</p> Resource Convention App Service <code>AS</code> App Service Plan <code>ASP</code> Virtual Network <code>VNET</code> Resource Group <code>RG</code> Virtual Machine <code>VM</code> Database <code>DB</code> Subnet <code>SNET</code> Front Door <code>FD</code>"},{"location":"deployment/infrastructure/#azure-environment-setup","title":"Azure environment setup","text":"<p>The following steps are required to set up the environment, with linked issues to automate them:</p> <ul> <li><code>terraform apply</code></li> <li>Set up Slack notifications by creating a Slack email for the #benefits-notify channel, then setting it as a Secret in the Key Vault named <code>slack-benefits-notify-email</code></li> <li>Set required App Service configuration and configuration by setting values in Key Vault (the mapping is defined in app_service.tf)</li> <li>Set up webhook from GitHub to App Service Deployment Center for the <code>Packages</code> event</li> </ul> <p>This is not a complete step-by-step guide; more a list of things to remember. This may be useful as part of incident response.</p>"},{"location":"deployment/release/","title":"Making a release","text":"<p>This list outlines the manual steps needed to make a new release of the <code>benefits</code> app.</p> <p>A release is made by merging changes into the <code>prod</code> branch, which kicks off a deployment to the production environment. More details on the deployment steps can be found under Workflows.</p> <p>The list of releases can be found on the repository Releases page on GitHub.</p> <p>Start a new Release on Github</p>"},{"location":"deployment/release/#0-decide-on-the-new-version-number","title":"0. Decide on the new version number","text":"<p>A new release implies a new version.</p> <p><code>benefits</code> uses the CalVer versioning scheme, where version numbers look like: <code>YYYY.0M.R</code></p> <ul> <li><code>YYYY</code> is the 4-digit year of the release; e.g. <code>2021</code>, <code>2022</code></li> <li><code>0M</code> is the 2-digit, 0-padded month of the release; e.g. <code>02</code> is February, <code>12</code>   is December.</li> <li><code>R</code> is the 1-based release counter for the given year and month;   e.g. <code>1</code> for the first release of the month, <code>2</code> for the second, and so on.</li> </ul>"},{"location":"deployment/release/#1-prepare-release-in-a-branch","title":"1. Prepare release in a branch","text":"<p>Typically changes for a release will move from <code>dev</code>, to <code>test</code>, to <code>prod</code>. This assumes <code>dev</code> is in a state that it can be deployed without disruption. (This is called a <code>Regular</code> release.)</p> <p>If <code>dev</code> or <code>test</code> contain in-progress work that is not ready for production, and a hotfix is needed in production, a separate process to test the changes before deploying to <code>prod</code> must be undertaken. (This is called a <code>Hotfix</code> release.)</p> <p>As implied in the previous step, all releases follow the same version number format.</p> <p>The following diagram shows how a release should propagate to <code>prod</code> under different circumstances:</p> <pre><code>graph LR\n    A(Release branch) --&gt; B{Are dev and test ready to deploy?};\n    B --&gt;|Yes| C(dev);\n    C --&gt; D(test);\n    D --&gt; E(prod);\n    B --&gt;|No| E;</code></pre> <p>By convention the release branch is called <code>release/YYYY.0M.R</code> using the upcoming version number.</p>"},{"location":"deployment/release/#2-bump-the-application-version-number","title":"2. Bump the application version number","text":"<p>The app code maintains a version number in <code>benefits/__init__.py</code>, used by the instrumentation and logging systems.</p> <p>This version number must be updated to match the new version in the same format: <code>YYYY.0M.R</code></p>"},{"location":"deployment/release/#3-open-a-pr","title":"3. Open a PR","text":"<p>Initially from the release branch to the target environment branch, following the merge sequence in the diagram above.</p>"},{"location":"deployment/release/#4-merge-the-pr","title":"4. Merge the PR","text":"<p>After checks pass and review approval is given, merge the PR to kick off the deployment.</p> <p>Repeat steps 3 and 4 for each deployment environment target, again following the merge sequence in the diagram above.</p>"},{"location":"deployment/release/#5-tag-the-release","title":"5. Tag the release","text":"<p>Once the deploy has completed to <code>prod</code>, the version can be tagged and pushed to GitHub.</p> <p>From a local terminal:</p> <pre><code>git fetch\n\ngit checkout prod\n\ngit reset --hard origin/prod\n\ngit tag -a YYYY.0M.R\n</code></pre> <p>Git will open your default text editor and prompt you for the tag annotation. For the tag annotation, use the title of the <code>release</code>-tagged Issue that kicked off the release. Finally, after closing the text editor:</p> <pre><code>git push origin YYYY.0M.R\n</code></pre>"},{"location":"deployment/release/#6-generate-release-notes","title":"6. Generate release notes","text":"<p>Also add a written description, and include screenshots/animations of new/updated pages/workflows.</p>"},{"location":"deployment/secrets/","title":"Setting secrets","text":"<p>Secret values used by the Benefits application (such as API keys, private keys, certificates, etc.) are stored in an Azure Key Vault for each environment.</p> <p>To set a secret, you can use the Azure portal or the Azure CLI.</p> <p>There are helper scripts under <code>terraform/secrets</code> which build up the Azure CLI command, given some inputs. The usage is as follows:</p> <p>First, make sure you are set up for local development and that you are in the <code>terraform/secrets</code> directory.</p> <pre><code>cd terraform/secrets\n</code></pre> <p>To set a secret by providing a value:</p> <pre><code>./value.sh &lt;environment_letter&gt; &lt;secret_name&gt; &lt;secret_value&gt;\n</code></pre> <p>where <code>environment_letter</code> is <code>D</code> for development, <code>T</code> for test, and <code>P</code> for production.</p> <p>To set a secret by providing the path of a file containing the secret (useful for multi-line secrets):</p> <pre><code>./file.sh &lt;environment_letter&gt; &lt;secret_name&gt; &lt;file_path&gt;\n</code></pre> <p>To verify the value of a secret, you can use the helper script named <code>read.sh</code>.</p> <pre><code>./read.sh &lt;environment_letter&gt; &lt;secret_name&gt;\n</code></pre>"},{"location":"deployment/secrets/#refreshing-secrets","title":"Refreshing secrets","text":"<p>To make sure the Benefits application uses the latest secret values in Key Vault, you will need to make a change to the app service\u2019s configuration. If you don\u2019t do this step, the application will instead use cached values, which may not be what you expect. See the Azure docs for more details.</p> <p>The steps are:</p> <ol> <li>After setting new secret values, go to the App Service configuration in Azure Portal, and change the value of the setting named <code>change_me_to_refresh_secrets</code>.</li> <li>Save your changes.</li> </ol> <p>The effects of following those steps should be:</p> <ul> <li>A restart of the App Service is triggered.</li> <li>The next time that our Azure infrastructure pipeline is run, the value of <code>change_me_to_refresh_secrets</code> is set back to the value defined in our Terraform file for the App Service resource.</li> </ul>"},{"location":"deployment/troubleshooting/","title":"Troubleshooting","text":""},{"location":"deployment/troubleshooting/#tools","title":"Tools","text":""},{"location":"deployment/troubleshooting/#monitoring","title":"Monitoring","text":"<p>We have ping tests set up to notify about availability of each environment. Alerts go to #benefits-notify.</p>"},{"location":"deployment/troubleshooting/#logs","title":"Logs","text":""},{"location":"deployment/troubleshooting/#azure-app-service-logs","title":"Azure App Service Logs","text":"<p>Open the <code>Logs</code> for the environment you are interested in. The following tables are likely of interest:</p> <ul> <li><code>AppServiceConsoleLogs</code>: <code>stdout</code> and <code>stderr</code> coming from the container</li> <li><code>AppServiceHTTPLogs</code>: requests coming through App Service</li> <li><code>AppServicePlatformLogs</code>: deployment information</li> </ul> <p>For some pre-defined queries, click <code>Queries</code>, then <code>Group by: Query type</code>, and look under <code>Query pack queries</code>.</p>"},{"location":"deployment/troubleshooting/#live-tail","title":"Live tail","text":"<p>After setting up the Azure CLI, you can use the following command to stream live logs:</p> <pre><code>az webapp log tail --resource-group RG-CDT-PUB-VIP-CALITP-P-001 --name AS-CDT-PUB-VIP-CALITP-P-001 2&gt;&amp;1 | grep -v /healthcheck\n</code></pre>"},{"location":"deployment/troubleshooting/#scm","title":"SCM","text":"<p>https://as-cdt-pub-vip-calitp-p-001-dev.scm.azurewebsites.net/api/logs/docker</p>"},{"location":"deployment/troubleshooting/#sentry","title":"Sentry","text":"<p>Cal-ITP\u2019s Sentry instance collects both errors (\u201cIssues\u201d) and app performance info.</p> <p>Alerts are sent to #benefits-notify in Slack. Others can be configured.</p> <p>You can troubleshoot Sentry itself by turning on debug mode and visiting <code>/error/</code>.</p>"},{"location":"deployment/troubleshooting/#specific-issues","title":"Specific issues","text":"<p>This section serves as the runbook for Benefits.</p>"},{"location":"deployment/troubleshooting/#terraform-lock","title":"Terraform lock","text":"<p>General info</p> <p>If Terraform commands fail (locally or in the Pipeline) due to an <code>Error acquiring the state lock</code>:</p> <ol> <li>Check the <code>Lock Info</code> for the <code>Created</code> timestamp. If it\u2019s in the past ten minutes or so, that probably means Terraform is still running elsewhere, and you should wait (stop here).</li> <li>Are any Pipeline runs stuck? If so, cancel that build, and try re-running the Terraform command.</li> <li>Do any engineers have a Terrafrom command running locally? You\u2019ll need to ask them. For example: They may have started an <code>apply</code> and it\u2019s sitting waiting for them to approve it. They will need to (gracefully) exit for the lock to be released.</li> <li>If none of the steps above identified the source of the lock, and especially if the <code>Created</code> time is more than ten minutes ago, that probably means the last Terraform command didn\u2019t release the lock. You\u2019ll need to grab the <code>ID</code> from the <code>Lock Info</code> output and force unlock.</li> </ol>"},{"location":"deployment/troubleshooting/#app-fails-to-start","title":"App fails to start","text":"<p>If the container fails to start, you should see a downtime alert. Assuming this app version was working in another environment, the issue is likely due to misconfiguration. Some things you can do:</p> <ul> <li>Check the logs</li> <li>Ensure the environment variables and configuration data are set properly.</li> <li>Turn on debugging</li> <li>Force-push/revert the environment branch back to the old version to roll back</li> </ul>"},{"location":"deployment/troubleshooting/#littlepay-api-issue","title":"Littlepay API issue","text":"<p>Littlepay API issues may show up as:</p> <ul> <li>The monitor failing</li> <li>The <code>Connect your card</code> button doesn\u2019t work</li> </ul> <p>A common problem that causes Littlepay API failures is that the certificate expired. To resolve:</p> <ol> <li>Reach out to support@littlepay.com</li> <li>Receive a new certificate</li> <li>Put that certificate into the configuration data and/or the GitHub Actions secrets</li> </ol>"},{"location":"deployment/troubleshooting/#eligibility-server","title":"Eligibility Server","text":"<p>If the Benefits application gets a 403 error when trying to make API calls to the Eligibility Server, it may be because the outbound IP addresses changed, and the Eligibility Server firewall is still restricting access to the old IP ranges.</p> <ol> <li>Grab the <code>outbound_ip_ranges</code> <code>output</code> values from the most recent Benefit deployment to the relevant environment.</li> <li>Update the IP ranges<ol> <li>Go to the Eligibility Server Pipeline</li> <li>Click <code>Edit</code></li> <li>Click <code>Variables</code></li> <li>Update the relevant variable with the new list of CIDRs</li> </ol> </li> </ol> <p>Note there is nightly downtime as the Eligibility Server restarts and loads new data.</p>"},{"location":"deployment/workflows/","title":"Workflows","text":"<p>The GitHub Actions deployment workflow configuration lives at <code>.github/workflows/deploy.yml</code>.</p> <p>Info</p> <p>The entire process from GitHub commit to full redeploy of the application can take from around 5 minutes to 10 minutes or more depending on the deploy environment. Have patience!</p>"},{"location":"deployment/workflows/#deployment-steps","title":"Deployment steps","text":"<p>The workflow is triggered with a <code>push</code> to the corresponding branch. It also responds to the <code>workflow_dispatch</code> event to allow manually triggering via the GitHub Actions UI.</p> <p>When a deployment workflow runs, the following steps are taken:</p>"},{"location":"deployment/workflows/#1-checkout-code","title":"1. Checkout code","text":"<p>From the tip of the corresponding branch (e.g. <code>dev</code>)</p>"},{"location":"deployment/workflows/#2-authenticate-to-ghcr","title":"2. Authenticate to GHCR","text":"<p>Using the <code>github.actor</code> and built-in <code>GITHUB_TOKEN</code> secret</p>"},{"location":"deployment/workflows/#3-build-and-push-image-to-github-container-registry-ghcr","title":"3. Build and push image to GitHub Container Registry (GHCR)","text":"<p>Build the root <code>Dockerfile</code>, tagging with both the branch name (e.g. <code>dev</code>) and the SHA from the HEAD commit.</p> <p>Push this image:tag into GHCR.</p>"},{"location":"deployment/workflows/#4-app-service-deploy","title":"4. App Service deploy","text":"<p>Each Azure App Service instance is configured to listen to a webhook from GitHub, then deploy the image.</p>"},{"location":"development/","title":"VS Code with devcontainers","text":"<p>Info</p> <p>VS Code with Devcontainers is the recommended development setup</p> <p>Warning</p> <p>You must build the base Docker image <code>benefits_client:latest</code> before running the devcontainer. See Local Setup</p>"},{"location":"development/#install-the-remote-containers-extension","title":"Install the <code>Remote - Containers</code> extension","text":"<p>VS Code can be used together with Docker via the Remote - Containers extension to enable a container-based development environment. This repository includes a <code>.devcontainer.json</code> file that configures remote container development and debugging.</p>"},{"location":"development/#open-the-repository-with-vs-code","title":"Open the repository with VS Code","text":"<p>With the Remote - Containers extension enabled, open the folder containing this repository inside Visual Studio Code.</p> <p>You should receive a prompt in the Visual Studio Code window; click <code>Reopen in Container</code> to run the development environment inside a container.</p> <p>If you do not receive a prompt, or when you feel like starting from a fresh environment:</p> <ol> <li>Ctrl/Cmd + Shift + P to bring up the command palette in Visual Studio Code</li> <li>Type <code>Remote-Containers</code> to filter the commands</li> <li>Select <code>Rebuild and Reopen in Container</code> to completely rebuild the devcontainer</li> <li>Select <code>Reopen in Container</code> to reopen the most recent devcontainer build</li> </ol>"},{"location":"development/#attach-a-debugger","title":"Attach a debugger","text":"<p>Once running inside a container, press F5 to attach a debugger to the client, running on <code>http://localhost</code> at a port dynamically assigned by Docker. See Docker dynamic ports for more information.</p> <p>Add breakpoints in the code and browse the local site to trigger a pause. Press F5 to continue execution from the breakpoint.</p>"},{"location":"development/#changing-launch-configuration","title":"Changing launch configuration","text":"<p>By default, the application is launched with <code>DJANGO_DEBUG=True</code>, causing Django to provide additional logging and error output and to relax certain security settings.</p> <p>Alternatively, you may attach to an instance launched with <code>DJANGO_DEBUG=False</code>, to allow debugging the app in a state more similar to production.</p> <p>In VS Code, press Ctrl/Cmd + Shift + D to open the <code>Run and Debug</code> pane, where you can select between the various configurations (disregard the duplicate entry, selecting either will work):</p> <p></p> <p>The environment can also be overridden for the debug session by editing the configuration in <code>.vscode/launch.json</code>, where any of the supported environment variables may be specified in the <code>env</code> block. For example, to test the app with reCAPTCHA environment variables:</p> <pre><code>{\n    \"name\": \"Django: Benefits Client\",\n    \"type\": \"python\",\n    \"request\": \"launch\",\n    \"program\": \"${workspaceFolder}/manage.py\",\n    \"args\": [\"runserver\", \"--insecure\", \"0.0.0.0:8000\"],\n    \"django\": true,\n    \"env\": {\n        // existing field...\n        \"DJANGO_DEBUG\": \"true\",\n        // add these 2 entries with the values for reCAPTCHA\n        \"DJANGO_RECAPTCHA_SITE_KEY\": \"&lt;SITE KEY HERE&gt;\",\n        \"DJANGO_RECAPTCHA_SECRET_KEY\": \"&lt;SECRET KEY HERE&gt;\"\n    }\n}\n</code></pre> <p>See #1071 for more examples and context.</p>"},{"location":"development/#exiting-devcontainers","title":"Exiting devcontainers","text":"<p>To close out of the container and re-open the directory locally in Visual Studio Code:</p> <ol> <li>Ctrl/Cmd + Shift + P to bring up the command palette in Visual Studio Code</li> <li>Type <code>Remote-Containers</code> to filter the commands</li> <li>Select <code>Reopen Locally</code></li> </ol>"},{"location":"development/commits-branches-merging/","title":"Commits, branches, and merging","text":""},{"location":"development/commits-branches-merging/#commits","title":"Commits","text":"<p>This project enforces the Conventional Commits style for commit message formatting:</p> <pre><code>&lt;type&gt;[(optional-scope)]: &lt;description&gt;\n\n[optional body]\n</code></pre> <p>Where <code>&lt;type&gt;</code> indicates the nature of the commit, one of a list of possible values:</p> <ul> <li><code>build</code> - related to the build or compile process</li> <li><code>chore</code> - administrative tasks, cleanups, dev environment</li> <li><code>ci</code> - related to automated builds/tests etc.</li> <li><code>docs</code> - updates to the documentation</li> <li><code>feat</code> - new code, features, or interfaces</li> <li><code>fix</code> - bug fixes</li> <li><code>perf</code> - performance improvements</li> <li><code>refactor</code> - non-breaking logic refactors</li> <li><code>revert</code> - undo a prior change</li> <li><code>style</code> - code style and formatting</li> <li><code>test</code> - having to do with testing of any kind</li> </ul> <p>E.g.</p> <pre><code>git commit -m \"feat(eligibility/urls): add path for start\"\n</code></pre>"},{"location":"development/commits-branches-merging/#branches","title":"Branches","text":"<p>The default GitHub branch is <code>dev</code>. All new feature work should be in the form of Pull Requests (PR) that target <code>dev</code> as their base.</p> <p>In addition to <code>dev</code>, the repository has three other long-lived branches:</p> <ul> <li><code>test</code> and <code>prod</code> correspond to the Test and Production deploy environments, respectively.</li> <li><code>gh-pages</code> hosts the compiled documentation, and is always forced-pushed by the   docs build process.</li> </ul>"},{"location":"development/commits-branches-merging/#protection-rules","title":"Protection rules","text":"<p>Branch protection rules are in place on three environment branches (<code>dev</code>, <code>test</code>, <code>prod</code>) to:</p> <ul> <li>Prevent branch deletion</li> <li>Restrict force-pushing, where appropriate</li> <li>Require passing status checks before merging into the target branch is allowed</li> </ul>"},{"location":"development/commits-branches-merging/#pr-branches","title":"PR branches","text":"<p>PR branches are typically named with a conventional type prefix, a slash <code>/</code>, and then descriptor in <code>lower-dashed-case</code>:</p> <pre><code>&lt;type&gt;/&lt;lower-dashed-descriptor&gt;\n</code></pre> <p>E.g.</p> <pre><code>git checkout -b feat/verifier-radio-buttons\n</code></pre> <p>and</p> <pre><code>git checkout -b refactor/verifier-model\n</code></pre> <p>PR branches are deleted once their PR is merged.</p>"},{"location":"development/commits-branches-merging/#merging","title":"Merging","text":"<p>Merging of PRs should be done using the merge commit strategy. The PR author should utilize <code>git rebase -i</code> to ensure their PR commit history is clean, logical, and free of typos.</p> <p>When merging a PR into <code>dev</code>, it is customary to format the merge commit message like:</p> <pre><code>Title of PR (#number)\n</code></pre> <p>instead of the default:</p> <pre><code>Merge pull request #number from source-repo/source-branch\n</code></pre>"},{"location":"development/docker-dynamic-ports/","title":"Docker dynamic ports","text":"<p>Docker dynamically assigns host machine ports that map into container application ports.</p>"},{"location":"development/docker-dynamic-ports/#inside-the-devcontainer","title":"Inside the Devcontainer","text":"<p>Info</p> <p>The Devcontainer can bind to a single container\u2019s port(s) and present those to your localhost machine via VS Code. Other services started along with the Devcontainer are not visible in VS Code. See Outside the Devconatiner for how to find information on those.</p> <p>Once started with F5, the <code>benefits</code> Django application runs on port <code>8000</code> inside the Devcontainer. To find the localhost address, look on the PORTS tab in VS Code\u2019s Terminal window. The <code>Local Address</code> corresponding to the record where <code>8000</code> is in the <code>Port</code> column is where the site is accessible on your host machine.</p> <p>Replace <code>0.0.0.0</code> with <code>localhost</code> and use the same port number shown in the <code>Local Address</code> column. This is highlighted by the red box in the image below:</p> <p></p>"},{"location":"development/docker-dynamic-ports/#outside-the-devcontainer","title":"Outside the Devcontainer","text":"<p>When running a <code>docker compose ...</code> command, or in other scenarios outside of the Devcontainer, there are multiple ways to find the <code>http://localhost</code> port corresponding to the service in question.</p>"},{"location":"development/docker-dynamic-ports/#docker-desktop","title":"Docker Desktop","text":"<p>The Docker Desktop application shows information about running containers and services/groups, including information about bound ports. In most cases, the application provides a button to launch a container/service directly in your browser when a port binding is available.</p> <p>In the Containers / Apps tab, expand the service group if needed to find the container in question, where you should see labels indicating the container is <code>RUNNING</code> and bound to <code>PORT: XYZ</code>.</p> <p>Hover over the container in question, and click the Open in Browser button to launch the app in your web browser.</p> <p></p>"},{"location":"development/docker-dynamic-ports/#docker-cli-commands","title":"Docker CLI commands","text":"<p>Using the <code>docker</code> command line interface, you can find the bound port(s) of running containers.</p> <pre><code>docker ps -f name=&lt;service&gt;\n</code></pre> <p>e.g. for the <code>docs</code> service:</p> <pre><code>docker ps -f name=docs\n</code></pre> <p>This prints output like the following:</p> <pre><code>CONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS         PORTS                     NAMES\n0d5b2e1fb910   benefits_client:dev   \"mkdocs serve --dev-\u2026\"   2 minutes ago   Up 2 minutes   0.0.0.0:62093-&gt;8000/tcp   benefits_docs_1\n</code></pre> <p>Looking at the <code>PORTS</code> column:</p> <pre><code>PORTS\n0.0.0.0:62093-&gt;8000/tcp\n</code></pre> <p>We can see that locally, port <code>62093</code> is bound to the container port <code>8000</code>.</p> <p>In this case, entering <code>http://localhost:62093</code> in the web browser navigates to the <code>docs</code> site homepage.</p>"},{"location":"development/i18n/","title":"Django message files","text":"<p>Django docs</p> <p>Internationalization and localization</p> <p>Translation</p> <p>Message files</p> <p>English messages: benefits/locale/en/LC_MESSAGES/django.po</p> <p>The Cal-ITP Benefits application is fully internationalized and available in both English and Spanish.</p> <p>It uses Django\u2019s built-in support for translation using message files, which contain entries of <code>msgid</code>/<code>msgstr</code> pairs. The <code>msgid</code> is referenced in source code so that Django takes care of showing the <code>msgstr</code> for the user\u2019s language.</p>"},{"location":"development/i18n/#updating-message-files","title":"Updating message files","text":"<p>Django has a utility command called <code>makemessages</code> to help maintain message files. It ensures that <code>msgid</code>s in the message files are actually used somewhere in source code and also detects new <code>msgid</code>s.</p> <p>There is a helper script that runs this command with some arguments: <code>bin/makemessages.sh</code></p> <pre><code>bin/makemessages.sh\n</code></pre> <p>Developers should use this script to update message files in a consistent way.</p>"},{"location":"development/i18n/#workflow","title":"Workflow","text":""},{"location":"development/i18n/#updating-english","title":"Updating English","text":"<p>Add English copy to templates directly first. Then, run the helper script, <code>bin/makemessages.sh</code>, so Django can update the <code>django.po</code> files for English and Spanish with the new copy.</p>"},{"location":"development/i18n/#updating-spanish","title":"Updating Spanish","text":"<p>Find the English copy in the Spanish <code>django.po</code> file as a <code>msgid</code>, and add the corresponding Spanish translation as the <code>msgstr</code>. Again, run the helper script for formatting and <code>bin/init.sh</code> to confirm the translation is rendered properly.</p>"},{"location":"development/i18n/#adding-agency-specific-copy","title":"Adding agency-specific copy","text":"<p>When templates have different copy per agency, create a new template for that agency-specific copy to live in. See the example of the MST-specific agency index page file, named <code>index--mst.html</code>. Include the agency-specific template file name in the migration object, as done here for MST, with <code>eligibility_index_template=\"eligibility/index--mst.html\"</code>.</p>"},{"location":"development/i18n/#fuzzy-strings","title":"Fuzzy strings","text":"<p>From Django docs:</p> <p><code>makemessages</code> sometimes generates translation entries marked as fuzzy, e.g. when translations are inferred from previously translated strings.</p> <p>Usually, the inferred translation is not correct, so make sure to review the <code>msgstr</code> and fix it if necessary. Then, remove the commented lines starting with <code>#, fuzzy</code> (otherwise the entry will not be used).</p>"},{"location":"development/linting-pre-commit/","title":"Linting and pre-commit","text":""},{"location":"development/linting-pre-commit/#formatting","title":"Formatting","text":"<p><code>black</code> provides Python code formatting via the [<code>ms-python.python</code>][python] VS Code extension.</p> <p><code>prettier</code> provides code formatting for front-end (CSS/JavaScript) via the <code>esbenp.prettier-vscode</code> VS Code extension.</p> <p>See the <code>.vscode/settings.json</code> file for more information on how this is configured in the devcontainer.</p>"},{"location":"development/linting-pre-commit/#linting","title":"Linting","text":"<p><code>flake8</code> provides Python code linting via the [<code>ms-python.python</code>][python] VS Code extension.</p> <p>See the <code>.vscode/settings.json</code> file for more information on how this is configured in the devcontainer.</p>"},{"location":"development/linting-pre-commit/#pre-commit","title":"pre-commit","text":"<p>This repository uses <code>pre-commit</code> hooks to check and format code. The <code>.pre-commit-config.yaml</code> file defines a number of <code>pre-commit</code> hooks, including <code>black</code>, <code>flake8</code>, line ending and whitespace checkers, and more.</p> <p><code>pre-commit</code> is installed and activated within the devcontainer and runs automatically with each commit.</p> <p>Branch protection rules on the environment branches in GitHub ensure that <code>pre-commit</code> checks have passed before a merge is allowed. See the workflow file at <code>.github/workflows/pre-commit.yml</code>.</p>"},{"location":"development/models-migrations/","title":"Django models and migrations","text":"<p>Models and migrations</p> <p><code>benefits/core/models.py</code></p> <p><code>benefits/core/migrations/0001_initial.py</code></p> <p>Cal-ITP Benefits defines a number of models in the core application, used throughout the codebase to configure different parts of the UI and logic.</p> <p>The Cal-ITP Benefits database is a simple Sqlite database that mostly acts as a read-only configuration store. Runtime configuration changes can be persisted via Django\u2019s Admin interface.</p>"},{"location":"development/models-migrations/#updating-models","title":"Updating models","text":"<p>When models are updated, new migrations must be generated to reflect those changes into the configuration database.</p> <p>A simple helper script exists to generate migrations based on the current state of models in the local directory:</p> <p><code>bin/makemigrations.sh</code></p> <pre><code>bin/makemigrations.sh\n</code></pre> <p>This script:</p> <ol> <li>Runs the django <code>makemigrations</code> command</li> <li>Formats the newly regenerated migration file with <code>black</code></li> </ol> <p>Commit the new migration file along with the model changes.</p>"},{"location":"development/test-server/","title":"Test Eligibility Verification server","text":"<p>A basic eligibility verification server is available for testing. The server code is available on GitHub, with its own set of documentation.</p>"},{"location":"development/test-server/#running-locally","title":"Running locally","text":"<pre><code>docker compose up [-d] server\n</code></pre> <p>The optional <code>-d</code> flag will start in detatched mode and allow you to continue using the terminal session. Otherwise your terminal will be attached to the container\u2019s terminal, showing the startup and runtime output.</p> <p>The API server is running on <code>http://localhost</code> at a port dynamically assigned by Docker. See Docker dynamic ports for more information on accessing the server on localhost.</p> <p>From within another Compose service container, the server is at <code>http://server:5000</code> using the service-forwarding features of Compose.</p> <p>In either case, the endpoint <code>/verify</code> serves as the Eligibility Verification API endpoint.</p>"},{"location":"development/test-server/#in-the-devcontainer","title":"In the Devcontainer","text":"<p>When running the Devcontainer, the server is automatically started.</p> <p>See Docker dynamic ports for more information on accessing the server on localhost.</p> <p>The server is accessible from within the Devcontainer at its Compose service address: <code>http://server:5000</code>.</p>"},{"location":"enrollment-pathways/","title":"Enrollment pathways","text":"<p>This section describes in more detail some of the different enrollment pathways with current or planned support in the Benefits application.</p>"},{"location":"enrollment-pathways/#current-work","title":"Current work","text":"<p>We do sprint planning and track day-to-day work on our Project Board.</p> <p>See our Milestones for current work tracked against specific features and different enrollment pathways.</p>"},{"location":"enrollment-pathways/#product-roadmap","title":"Product roadmap","text":"<p>Our product roadmap captures what we\u2019re currently building, what we\u2019ve built, and what we plan to build in the future. We update it at the end of each quarter or when priorities change.</p> <pre><code>timeline\n    title Cal-ITP Benefits Product Roadmap\n%% Cal-ITP Benefits Epics (2024)\n          section 2024\n\n          Q1&lt;br&gt;Complete\n          : Benefits admin tool (Foundation)\n          : SBMTD - Launch Reduced Fare Mobility ID enrollment pathway\n          : Migrate to Littlepay Backoffice API\n\n          Q2&lt;br&gt;Now\n          : Deploy low-income riders enrollment pathway\n          : Support for expiring benefits (low-income)\n          : Improved UX for agency card enrollment\n          : Improved UX for application error states\n          %% : Release enhancements to Veterans pathway\n\n          Q3&lt;br&gt;Next\n          : Benefits admin tool (Agency configuration)\n          : Benefits admin tool (Agency users)\n          : Release Medicare cardholder enrollment pathway\n\n          Q4&lt;br&gt;Planned\n          : Benefits admin tool (In-person eligibility verification)\n          : Release riders with disabilities enrollment pathway\n\n%% Cal-ITP Benefits Epics (2025)\n          section 2025\n\n          Q1\n          : Support benefits reciprocity between CA transit agencies\n          : Implement evolved organizing principles for app UX\n\n          Q2\n          : Support for multiple payment processors\n          : Integration with all MSA payment processors\n\n%%{\n    init: {\n        'logLevel': 'debug',\n        'theme': 'default' ,\n        'themeVariables': {\n            'cScale0': '#ffa500', 'cScaleLabel0': '#000000',\n            'cScale1': '#ffff00', 'cScaleLabel1': '#000000',\n            'cScale2': '#ffff00', 'cScaleLabel2': '#000000',\n            'cScale3': '#008000', 'cScaleLabel3': '#ffffff',\n            'cScale4': '#0000ff', 'cScaleLabel4': '#ffffff',\n            'cScale5': '#4b0082', 'cScaleLabel5': '#ffffff',\n            'cScale6': '#000000', 'cScaleLabel6': '#ffffff'\n        }\n    }\n}%%</code></pre>"},{"location":"enrollment-pathways/agency-cards/","title":"Agency Cards","text":"<p>Agency Cards is a generic term for reduced fare programs offered by Transit Providers, such as the Courtesy Card program from Monterey-Salinas Transit (MST).</p> <p>Agency cards are different from our other use cases in that eligibility verification happens on the agency side (offline) rather than through the Benefits app, and the Benefits app then checks for a valid Agency Card via an Eligibility API call.</p>"},{"location":"enrollment-pathways/agency-cards/#demonstration","title":"Demonstration","text":"<p>Here\u2019s a video showing what the flow looks like, having agency cardholders confirm eligibility via the Eligibility Server and enroll via Littlepay:</p>"},{"location":"enrollment-pathways/agency-cards/#architecture","title":"Architecture","text":"<p>In order to support an Agency Cards deployment, the Transit Provider produces a list of eligible users (CSV format) that is loaded into an instance of Eligibility Server running in the Transit Provider\u2019s cloud.</p> <p>Cal-ITP makes the <code>hashfields</code> tool to facilitate masking user data before it leaves Transit Provider on-premises systems.</p> <p>The complete system architecture looks like:</p> <pre><code>flowchart LR\n    rider((User's browser))\n    api[Eligibility Server]\n    data[Hashed Agency Card data]\n    cardsystem[Data source]\n\n    rider --&gt; Benefits\n\n    subgraph CDT Azure\n        Benefits\n    end\n\n    Benefits --&gt; api\n\n    subgraph Transit Provider cloud\n        api --&gt; data\n    end\n\n    subgraph Transit Provider on-prem\n        cardsystem --&gt; hashfields\n    end\n\n    hashfields --&gt; data</code></pre> <p>Notes:</p> <ul> <li>Eligibility Server source code</li> <li>hashfields source code</li> <li>More details about the Benefits architecture</li> <li>In MST, the <code>Data Source</code> is Velocity, the system MST uses to manage and print Courtesy Cards</li> </ul>"},{"location":"enrollment-pathways/agency-cards/#process","title":"Process","text":"<pre><code>sequenceDiagram\n    actor Rider\n    participant Benefits as Benefits app\n    participant elig_server as Eligibility Server\n    participant cc_data as Hashed data\n    participant Data Source\n    participant Littlepay\n\n    Data Source--&gt;&gt;cc_data: exports nightly\n    cc_data--&gt;&gt;elig_server: gets loaded on Server start\n\n    Rider-&gt;&gt;Benefits: visits site\n    Benefits--&gt;&gt;elig_server: passes entered Agency Card details\n    elig_server--&gt;&gt;Benefits: confirms eligibility\n\n    Benefits--&gt;&gt;Littlepay: enrollment start\n    Rider-&gt;&gt;Littlepay: enters payment card details\n    Littlepay--&gt;&gt;Benefits: enrollment complete</code></pre>"},{"location":"enrollment-pathways/low-income/","title":"Low-income","text":""},{"location":"enrollment-pathways/low-income/#overview","title":"Overview","text":"<p>This use case describes a feature in the Cal-ITP Benefits app that allows Californians to verify their active participation in the CalFresh Program\u2014as a proxy for low-income status\u2014to receive reduced fares for transit when paying by contactless debit or credit card at participating transit operators in California.</p> <p>Actor:\u00a0A person who uses public transit in California. For benefit eligibility, a \u201clow-income rider\u201d is a person who has received CalFresh benefits in any of the previous three months.</p> <p>Goal:\u00a0To verify a transit rider\u2019s financial need so they receive reduced fares when paying by contactless debit or credit card.</p> <p>Precondition:\u00a0The California transit operator offers fixed route service, has installed and tested validator hardware necessary to collect fares using contactless payment on bus or rail lines, and the operator has a policy in place to offer a transit discount to low-income riders.</p>"},{"location":"enrollment-pathways/low-income/#basic-flow","title":"Basic Flow","text":"<pre><code>sequenceDiagram\nautonumber\n%% Low-income Rider Enrollment Pathway\n    actor Transit Rider\n    participant Benefits as Benefits app\n    participant IdG as Identity Gateway\n    participant Login.gov\n    participant CDSS\n    participant Littlepay\nTransit Rider-&gt;&gt;Benefits: visits benefits.calitp.org\n    activate Benefits\nBenefits--&gt;&gt;IdG: eligibility verification\n    activate IdG\nTransit Rider-&gt;&gt;Login.gov: account authentication\n    activate Login.gov\nIdG--&gt;&gt;Login.gov: requests required PII\n    activate Login.gov\n    Note right of Login.gov: first name&lt;br&gt;last name&lt;br&gt;Social Security number&lt;br&gt;date of birth\nLogin.gov--&gt;&gt;IdG: returns required PII\n    deactivate Login.gov\nIdG--&gt;&gt;CDSS: check Calfresh enrollment status\n    activate CDSS\nCDSS--&gt;&gt;IdG: return Calfresh enrollment status\n    deactivate CDSS\nIdG--&gt;&gt;Benefits: eligibility response\n    deactivate IdG\n    deactivate Login.gov\nBenefits--&gt;&gt;Littlepay: payment enrollment start\n    activate Littlepay\nTransit Rider-&gt;&gt;Littlepay: provides debit or credit card details\nLittlepay--&gt;&gt;Benefits: payment method enrollment confirmation\n    deactivate Littlepay\n    deactivate Benefits</code></pre> <ol> <li> <p>The transit rider visits the web application at <code>benefits.calitp.org</code> in a browser on their desktop computer.</p> </li> <li> <p>The transit rider chooses the transit operator that serves their area.</p> </li> <li> <p>The transit rider chooses to verify their eligibility as a participant in the CalFresh Program.</p> </li> <li> <p>The transit rider authenticates with their existing\u00a0Login.gov\u00a0account or, if they don\u2019t have one, creates a\u00a0Login.gov\u00a0account.</p> </li> <li> <p>The Cal-ITP Benefits app interfaces with the California Department of Technology Identity Gateway (IdG) to verify benefit eligibility. The IdG uses personal information shared by Login.gov to verify CalFresh participation status.</p> </li> <li> <p>The IdG uses the\u00a0response provided by the California Department of Social Services (CDSS) to determine the rider\u2019s eligibility for a transit benefit.</p> </li> <li> <p>The IdG then passes the response from CDSS as low-income status = TRUE to the Cal-ITP Benefits app to indicate the person is eligible for a benefit.</p> </li> <li> <p>The transit rider provides the debit or credit card details they use to pay for transit to Littlepay, the payment processor that facilitates transit fare collection.</p> </li> <li> <p>The app registers the low-income benefit with the transit rider\u2019s debit or credit card.</p> </li> </ol>"},{"location":"enrollment-pathways/low-income/#alternative-flows","title":"Alternative Flows","text":"<ul> <li>Suppose the transit rider does not have a desktop computer. In this case, they open the web application at <code>benefits.calitp.org</code> in a mobile browser on their iOS or Android tablet or mobile device to complete enrollment using the basic flow.</li> </ul> <ul> <li>Suppose the transit rider cannot authenticate with Login.gov, or will not create an account. In either case, the app cannot determine their CalFresh Program participation status and they cannot enroll their contactless debit or credit card for a reduced fare.</li> </ul> <ul> <li>Suppose the IdG returns a status of <code>FALSE</code> for CalFresh Program participation status. In that case, the Cal-ITP Benefits app will not allow the transit rider to enroll their contactless debit or credit card for a reduced fare.</li> </ul> <ul> <li>Suppose the debit or credit card expires or is canceled by the issuer. In that case, the transit rider must repeat the basic flow to register a new debit or credit card.</li> </ul> <ul> <li>When the initial transit benefit enrollment period ends after one year from the date of enrollment, the transit rider must repeat the basic flow to re-enroll.</li> </ul> <ul> <li>Suppose the transit rider attempts to re-enroll for a transit benefit as a CalFresh Program participant three months after their enrollment period started. The app will inform them they must wait re-enroll within 14 days of the benefit expiration.</li> </ul> <ul> <li>Suppose the transit rider doesn\u2019t re-enroll for a transit benefit after one year, but continues paying for transit using the card they registered. The transit operator will charge the rider full fare.</li> </ul> <ul> <li>If the transit rider uses more than one debit or credit card to pay for transit, they repeat the basic flow for each card.</li> </ul>"},{"location":"enrollment-pathways/low-income/#postcondition","title":"Postcondition","text":"<p>The transit rider receives a fare reduction each time they use the debit or credit card they registered to pay for transit rides. The number of times they can use the card to pay for transit is unlimited, but the benefit expires one year after enrollment.</p>"},{"location":"enrollment-pathways/low-income/#benefits","title":"Benefits","text":"<ul> <li>The transit rider no longer needs cash to pay for transit rides.</li> </ul> <ul> <li>The transit rider doesn\u2019t have to lock up funds on a closed-loop card offered by the transit agency.</li> </ul> <ul> <li>The transit rider pays for transit rides with their debit or credit card, just as they do for groceries, a cup of coffee, or any other good or service.</li> </ul> <ul> <li>The transit rider can enroll in a transit benefit from home when convenient; they do not have to visit a transit agency in person.</li> </ul> <ul> <li>The transit rider does not have to prove income eligibility with the transit agency. The app simply uses their participation in the CalFresh program to confirm eligibility for a transit benefit.</li> </ul> <ul> <li>The transit agency doesn\u2019t have to craft and policy for a low-icome discount; they simply use the approach implemented in the Cal-ITP Benefits application. As more agencies adopt the application, they also adopt a standard policy for transit benefits.</li> </ul> <ul> <li>Secure state and federal solutions manage the transit rider\u2019s personal identifiable information (PII):\u00a0Login.gov\u00a0and the California Department of Technology Identity Gateway (IdG). Transit riders do not have to share personal information with local transit operators.</li> </ul> <ul> <li>Benefit enrollment takes minutes rather than days or weeks.</li> </ul> <ul> <li>Benefit enrollment doesn\u2019t require online accounts with private companies.</li> </ul>"},{"location":"enrollment-pathways/low-income/#example-scenario","title":"Example Scenario","text":"<p>A CalFresh Program participant uses public transit regularly. They don\u2019t have a car and depend on buses to get to appointments and do errands that take too long to use their bicycle. Even though this person already qualifies for benefits from the California Department of Social Services, they had to navigate another extensive, in-person eligibility process with different requirements to qualify for reduced fares from their local transit agency. They now receive a 50% fare reduction but have to pay for transit rides using the closed loop card provided by the operator to receive the reduced fare. It\u2019s frustrating and inconvenient to reload this closed loop card in $10 payments every week, especially because they sometimes they could use the money tied up on the card to make ends meet. In summary, this person pays for daily expenses using three forms of payment: their Electronic Benefits Transfer (EBT) card for eligible items, their agency card for transportation, and their bank card (or cash) for everything else.</p> <p>The transit operator serving their region of California implements contactless payments on fixed bus routes throughout the service area. This rider uses <code>benefits.calitp.org</code> on their mobile device to confirm their participation in the CalFresh Program offered by CDSS and registers their debit card for reduced fares. They tap to pay when boarding buses in their area and are automatically charged the reduced fare. While they still need to manage funds on their EBT card and their bank card, they no longer need to use their transit operator card to pay for transit. Best of all, they have complete access to all funds in their weekly budget. If other expenses are higher one week, they can allocate additional funds to those areas and ride transit less.</p>"},{"location":"enrollment-pathways/older-adults/","title":"Older adults","text":"<p>One Benefits application use case is for riders age 65 years and older. The Benefits application verifies the person\u2019s age to confirm eligibility and allows those eligible to enroll their contactless payment card for their transit benefit.</p> <p>Currently, the app uses Login.gov\u2019s Identity Assurance Level 2 (IAL2) to confirm age, which requires a person to have a Social Security number, a valid state-issued ID card and a phone number with a phone plan associated with the person\u2019s name. Adding ways to confirm eligibility for people without a Social Security number, for people who are part of a transit agency benefit program are on the roadmap.</p>"},{"location":"enrollment-pathways/older-adults/#demonstration","title":"Demonstration","text":"<p>Here\u2019s a video showing what the flow looks like, having older adults confirm eligibility via Login.gov and enroll via Littlepay:</p>"},{"location":"enrollment-pathways/older-adults/#process","title":"Process","text":"<pre><code>sequenceDiagram\n    actor Rider\n    participant Benefits as Benefits app\n    participant IdG as Identity Gateway\n    participant Login.gov\n    participant Littlepay\n\n    Rider-&gt;&gt;Benefits: visits site\n    Benefits--&gt;&gt;IdG: identity proofing\n    IdG--&gt;&gt;Login.gov: identity proofing\n    Rider-&gt;&gt;Login.gov: enters SSN and ID\n    Login.gov--&gt;&gt;IdG: eligibility verification\n    IdG--&gt;&gt;Benefits: eligibility verification\n    Benefits--&gt;&gt;Littlepay: enrollment start\n    Rider-&gt;&gt;Littlepay: enters payment card details\n    Littlepay--&gt;&gt;Benefits: enrollment complete</code></pre>"},{"location":"enrollment-pathways/veterans/","title":"Veterans","text":""},{"location":"enrollment-pathways/veterans/#overview","title":"Overview","text":"<p>This use case describes a feature in the Cal-ITP Benefits app that allows US veterans who use public transit to verify their veteran status and receive reduced fares when paying by contactless debit or credit card at participating transit providers in California.</p> <p>Actor:\u00a0A US veteran who uses public transit in California. For benefit eligibility, a veteran is defined as \u201ca person who served in the active military, naval, or air service, and was discharged or released therefrom under conditions other than dishonorable.\u201d (source)</p> <p>Goal:\u00a0To verify a transit rider\u2019s veteran status and enable the rider to receive reduced fares when paying by contactless debit or credit card.</p> <p>Precondition:\u00a0The California transit provider delivering fixed route service has installed and tested validator hardware necessary to collect fares using contactless payment on bus or rail lines, and the provider has a policy to offer a transit discount for US veterans.</p>"},{"location":"enrollment-pathways/veterans/#demonstration","title":"Demonstration","text":"<p>Here\u2019s a video showing what the flow looks like, having veterans confirm eligibility via Login.gov and enroll via Littlepay:</p>"},{"location":"enrollment-pathways/veterans/#basic-flow","title":"Basic flow","text":"<pre><code>sequenceDiagram\n%% Veteran Enrollment Pathway\n    actor Transit Rider\n    participant Benefits as Benefits app\n    participant IdG as Identity Gateway\n    participant Login.gov\n    participant VA.gov\n    participant Littlepay\nTransit Rider-&gt;&gt;Benefits: visits benefits.calitp.org\n    activate Benefits\nBenefits--&gt;&gt;IdG: eligibility verification\n    activate IdG\nTransit Rider-&gt;&gt;Login.gov: account authentication\n    activate Login.gov\nIdG--&gt;&gt;Login.gov: requests required PII\n    activate Login.gov\n    Note right of Login.gov: transit rider first name&lt;br&gt;transit rider last name&lt;br&gt;home address&lt;br&gt;date of birth\nLogin.gov--&gt;&gt;IdG: returns required PII\n    deactivate Login.gov\nIdG--&gt;&gt;VA.gov: check veteran status\n    activate VA.gov\nVA.gov--&gt;&gt;IdG: return veteran status\n    deactivate VA.gov\nIdG--&gt;&gt;Benefits: eligibility response\n    deactivate IdG\n    deactivate Login.gov\nBenefits--&gt;&gt;Littlepay: payment enrollment start\n    activate Littlepay\nTransit Rider-&gt;&gt;Littlepay: provides debit or credit card details\nLittlepay--&gt;&gt;Benefits: payment method enrollment confirmation\n    deactivate Littlepay\n    deactivate Benefits</code></pre> <ol> <li>The transit rider visits the web application at\u00a0benefits.calitp.org\u00a0in a browser on their desktop computer.</li> <li>The transit rider chooses the transit provider that serves their area.</li> <li>The transit rider selects the option to receive a reduced fare for veterans.</li> <li>The transit rider authenticates with their existing\u00a0Login.gov\u00a0account or creates a\u00a0Login.gov\u00a0account if they don\u2019t have one.</li> <li>The Cal-ITP Benefits app interfaces with the\u00a0California Department of Technology\u00a0Identity Gateway (IdG) to verify benefit eligibility. The IdG requests the required personal information to verify veteran status from\u00a0Login.gov.</li> <li>The IdG utilizes the\u00a0Veteran Confirmation API\u00a0provided by the US Department of Veterans Affairs to determine the rider\u2019s veteran status.</li> <li>The IdG passes the response from VA.gov as veteran status = TRUE to the Cal-ITP Benefits app to indicate the person is eligible for a benefit.</li> <li>The transit rider provides the debit or credit card details they use to pay for transit to Littlepay, the payment processor that facilitates transit fare collection.</li> <li>The app registers the veteran benefit with the transit rider\u2019s debit or credit card.</li> </ol>"},{"location":"enrollment-pathways/veterans/#alternative-flows","title":"Alternative flows","text":"<ul> <li>If the transit rider does not have a desktop computer, they can open the web application at benefits.calitp.org\u00a0in a mobile browser on their iOS or Android tablet or mobile device to complete enrollment using the basic flow.</li> <li>Suppose the transit rider cannot authenticate with\u00a0Login.gov, or will not create an account. In either case, the app cannot determine their veteran status and, thus, cannot enroll their contactless debit or credit card for a reduced fare.</li> <li>If VA.gov determines the person does not meet the definition of a veteran (IdG returns a veteran status of FALSE), the Cal-ITP Benefits app will not allow the transit rider to enroll their contactless debit or credit card for a reduced fare.</li> <li>If the debit or credit card expires or is canceled by the issuer, the transit rider must repeat the basic flow to register a new debit or credit card.</li> <li>If the transit rider uses more than one debit or credit card to pay for transit, they repeat the basic flow for each card.</li> </ul>"},{"location":"enrollment-pathways/veterans/#postcondition","title":"Postcondition","text":"<p>The transit rider receives a fare reduction each time they use the debit or credit card they registered to pay for transit rides. The number of times they can use the card to pay for transit is unlimited and the benefit never expires.</p>"},{"location":"enrollment-pathways/veterans/#benefits","title":"Benefits","text":"<ul> <li>The transit rider no longer needs cash to pay for transit rides.</li> <li>The transit rider doesn\u2019t have to lock up funds on a closed-loop card offered by the transit provider.</li> <li>The transit rider pays for transit rides with their debit or credit card, just as they pay for any other good or service that accepts contactless payment.</li> <li>The transit rider can enroll in a transit benefit from home when convenient; they do not have to visit a transit provider in person.</li> <li>Secure state and federal solutions manage the transit rider\u2019s personal identifiable information (PII):\u00a0Login.gov\u00a0and the California Department of Technology Identity Gateway (IdG). Transit riders do not have to share personal information with local transit agencies.</li> <li>Benefits enrollment takes minutes rather than days or weeks.</li> </ul>"},{"location":"enrollment-pathways/veterans/#example-scenario","title":"Example scenario","text":"<p>A veteran in California uses public transit regularly. They don\u2019t have a car and depend on buses to get to appointments and do errands that take too long to use their bicycle. They receive a 50% fare reduction for being a US veteran but have to pay for transit rides using the closed loop card provided by the agency to receive the reduced fare. It\u2019s frustrating and inconvenient to reload this agency card in $10 payments every week, especially because they sometimes need the money tied up on the card to pay for groceries and medication.</p> <p>The transit provider serving their part of California implements contactless payments on fixed bus routes throughout the service area. This rider uses\u00a0benefits.calitp.org\u00a0to confirm their veteran status and register their debit card for reduced fares. They tap to pay when boarding buses in their area and are automatically charged the reduced fare. They no longer need to carry one card to pay for transit and another for other purchases. Best of all, they have complete access to all funds in their weekly budget. If food and medication costs are higher one week, they can allocate additional funds to those areas and ride transit less.</p>"},{"location":"getting-started/","title":"Local setup","text":"<p>Running the Benefits application in a local, non-production environment requires Docker.</p> <p>The following commands should be run in a terminal program like <code>bash</code>.</p>"},{"location":"getting-started/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/cal-itp/benefits\n</code></pre>"},{"location":"getting-started/#create-an-environment-file","title":"Create an environment file","text":"<p>The application is configured with defaults to run locally, but an <code>.env</code> file is required to run with Docker Compose. Start from the existing sample:</p> <pre><code>cp .env.sample .env\n</code></pre> <p>E.g. to change the localhost port from the default <code>8000</code> to <code>9000</code>, add the following line to your <code>.env</code> file:</p> <pre><code>DJANGO_LOCAL_PORT=9000\n</code></pre> <p>See Configuration for more details on supported environment variables and their settings.</p>"},{"location":"getting-started/#run-the-build-script","title":"Run the build script","text":"<p>This builds the runtime and devcontainer images:</p> <pre><code>bin/build.sh\n</code></pre> <p>If you need all layers to rebuild, use:</p> <pre><code>docker compose build --no-cache client\n</code></pre>"},{"location":"getting-started/#start-the-client","title":"Start the client","text":"<p>The optional <code>-d</code> flag will start in detatched mode and allow you to continue using the terminal session.</p> <pre><code>docker compose up -d client\n</code></pre> <p>Otherwise attach your terminal to the container\u2019s terminal, showing the startup and runtime output:</p> <pre><code>docker compose up client\n</code></pre> <p>After initialization, the client is running running on <code>http://localhost:8000</code> by default.</p> <p>The backend administrative interface can be accessed at the <code>/admin</code> route using the superuser account you setup as part of initialization.</p> <p>By default, sample values are used to initialize Django. Alternatively you may:</p> <ul> <li>Set environment variable values to use instead of the default sample values</li> </ul> <p>Stop the running services with:</p> <pre><code>docker compose down\n</code></pre>"},{"location":"getting-started/documentation/","title":"Documentation","text":"<p>This website is built using <code>mkdocs</code> from the contents of the <code>dev</code> (default) branch.</p> <p>The <code>mkdocs.yml</code> file in the repository root configures the build process, including the available plugins.</p>"},{"location":"getting-started/documentation/#editing","title":"Editing","text":"<p>All content lives under the <code>docs/</code> directory in the repository.</p> <p>To add new sections/articles, create new directories and files under the <code>docs/</code> directory, in Markdown format.</p> <p>The pencil icon is a shortcut to quickly edit the content of the page you are viewing on the website:</p> <p></p> <p>Above: Screenshot showing the edit pencil circled in red</p>"},{"location":"getting-started/documentation/#features","title":"Features","text":"<ul> <li> <p>Material for MkDocs: Reference</p> <p>See <code>mkdocs.yml</code> for enabled plugins/features</p> </li> </ul> <ul> <li> <p>Mermaid</p> <p>Use code fences with <code>mermaid</code> type to render Mermaid diagrams within docs. For example, this markdown:</p> <pre><code>```mermaid\ngraph LR\n    Start --&gt; Stop\n```\n</code></pre> <p>Yields this diagram:</p> <pre><code>graph LR\n    Start --&gt; Stop</code></pre> </li> </ul>"},{"location":"getting-started/documentation/#running-locally","title":"Running locally","text":"<p>The documentation website can be run locally using Docker Compose:</p> <pre><code># from inside the .devcontainer/ directory\ndocker compose up docs\n</code></pre> <p>The site is served from <code>http://localhost</code> at a port dynamically assigned by Docker. See Docker dynamic ports for more information.</p> <p>The website is automatically rebuilt as changes are made to <code>docs/</code> files.</p>"},{"location":"getting-started/documentation/#in-the-devcontainer","title":"In the Devcontainer","text":"<p>When running the Devcontainer, the docs site is automatically started.</p> <p>See Docker dynamic ports for more information on accessing the site on localhost.</p>"},{"location":"getting-started/documentation/#deploying","title":"Deploying","text":"<p>A GitHub Action watches for pushes to <code>dev</code>, and uses <code>mhausenblas/mkdocs-deploy-gh-pages</code> to build the <code>mkdocs</code> content, force-pushing to the <code>gh-pages</code> branch. At that point, GitHub Pages redeploys the docs site.</p>"},{"location":"product-and-design/analytics/","title":"Analytics","text":"<p>The Cal-ITP Benefits application, currently live at <code>https://benefits.calitp.org/</code>, uses Amplitude to collect specific user and event data properties to analyze application usage.</p>"},{"location":"product-and-design/analytics/#information-not-collected","title":"Information not collected","text":"<p>The following user attributes are not collected:</p> <ul> <li>IP address</li> <li>Designated Market Area (DMA)</li> </ul> <p>See the Amplitude analytics code on GitHub.</p>"},{"location":"product-and-design/analytics/#user-information-collected","title":"User information collected","text":"<p>A combination of default and application-specific custom user properties are collected for each user who visits the Benefits web application.</p>"},{"location":"product-and-design/analytics/#default-amplitude-user-properties-collected","title":"Default Amplitude user properties collected","text":"<p>The following attributes are collected from the browser of every user who visits the application, provided the browser does not block the tracking library:</p> User property Description Example value(s) Carrier The device\u2019s carrier. <code>Verizon</code> Country Country of the event. This is pulled using GeoIP. <code>United States</code> City City of the event. This is pulled using GeoIP. <code>San Francisco</code> Device family Family of the device. <code>Apple iPhone, Samsung Galaxy Tablet, Windows</code> Device type Specific type of device. <code>Apple iPhone 6, Samsung Galaxy Note 4, Windows</code> Language Language of the device. <code>English</code> Library Library used to send the event. <code>Amplitude-iOS/3.2.1, HTTP/1.0</code> OS Operating system is the name of the user\u2019s mobile operating system or browser. Operating system version is the version of the users\u2019 mobile operating system or browser. <code>iOS 9.1, Chrome 46</code> Platform Platform of the product. <code>Web</code> Region Region (e.g. state, province, county) of the event. This is pulled using GeoIP. <code>California</code> Start version First version of the application identified for the user. <code>1.0.0</code> Version Current verison of the application identified for the user <code>1.0.0</code> <p>Read more about each property on the Amplitude documentation.</p>"},{"location":"product-and-design/analytics/#custom-user-properties-collected","title":"Custom user properties collected","text":"<p>The following custom user attributes are collected when the user performs specific actions on the application, like selecing an eligibility type or transit agency:</p> User property Description Example value(s) <code>eligibility_types</code> Eligibility type chosen by user\u00a0 <code>[veteran]</code> <code>eligibility_verifier</code> Eligibility verifier used by user\u00a0 <code>VA.gov - Veteran (MST)</code> <code>referrer</code> URL that the event came from\u00a0 <code>https://benefits.calitp.org/help/</code> <code>referring_domain</code> Domain that the event came from\u00a0 <code>benefits.calitp.org</code> <code>transit_agency</code> Agency chosen by the user\u00a0 <code>Monterey-Salinas Transit</code> <code>user_agent</code> User\u2019s browser agent\u00a0 <code>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36</code>"},{"location":"product-and-design/analytics/#event-information-collected","title":"Event information collected","text":"<p>Information is collected on key user actions on the app, called events. Read about each event on the Amplitude event documentation for Benefits. Each event is categorized within one of four categories: core, authentication, eligibility or enrollment.</p>"},{"location":"product-and-design/analytics/#core-events","title":"Core events","text":"<p>These events track when a user clicks on a link on the application.</p> <ul> <li>changed language</li> <li>clicked link</li> <li>viewed page</li> </ul> <p>Read more on each of these events on the Amplitude event documentation for Benefits, filtered by Core.</p>"},{"location":"product-and-design/analytics/#authentication-events","title":"Authentication events","text":"<p>These events track the progress of a user going through the authentication process of both signing in and optionally signing out.</p> <ul> <li>canceled sign in</li> <li>finished sign in</li> <li>finished sign out</li> <li>started sign in</li> <li>started sign out</li> </ul> <p>Read more on each of these events on the Amplitude event documentation for Benefits, filtered by Authentication.</p>"},{"location":"product-and-design/analytics/#eligibility-events","title":"Eligibility events","text":"<p>These events track the progress of a user choosing an eligibility verifier and completing eligibility verification.</p> <ul> <li>returned eligibility</li> <li>selected eligibility verifier</li> <li>started eligibility</li> </ul> <p>Read more on each of these events on the Amplitude event documentation for Benefits, filtered by Eligibility.</p>"},{"location":"product-and-design/analytics/#enrollment-events","title":"Enrollment events","text":"<p>These events track the progress of a user who has successfully verified their eligibility and is enrolling their payment card with the system.</p> <ul> <li>closed payment connection</li> <li>returned enrollment</li> <li>started payment connection</li> </ul> <p>Read more on each of these events on the Amplitude event documentation for Benefits, filtered by Enrollment.</p>"},{"location":"product-and-design/analytics/#key-metrics","title":"Key metrics","text":"<p>Various key metrics are collected and analyzed, including:</p> <ul> <li>Number of users who successfully completed authentication: Users who <code>started sign in</code>, <code>finished sign in</code></li> <li>Number of users who successfully verified eligibility: Users who completed the above and <code>selected eligibility verifier</code>, <code>started eligibility</code>, <code>returned eligibility</code> with a status of <code>True</code></li> <li>Numbers of users who successfully completed enrollment: Users who completed all of the above and <code>started payment connection</code>, <code>closed payment connection</code> and <code>returned enrollment</code> with a status of <code>Success</code></li> </ul>"},{"location":"product-and-design/copy-delivery/","title":"Copy delivery process","text":"<p>The <code>locale</code> folder in this repository contain the <code>django.po</code> message files for English and Spanish translation strings for the Benefits application.</p> <p>Translation strings include all application copy, including:</p> <ul> <li>All application copy</li> <li>Image and illustration alt tags</li> <li>Page titles used in the browser tab</li> <li>In-line link URLs</li> <li>Error messages (like no script, no cookies warnings)</li> </ul>"},{"location":"product-and-design/copy-delivery/#cal-itp-benefits-application-copy","title":"Cal-ITP Benefits Application Copy","text":"<p>The human-readable version of the English and Spanish translation strings for the application are delivered to Design and Engineering by Product, and live at this link: Cal-ITP Benefits Application Copy.</p> <p>By tabs:</p> <ul> <li><code>EN-USA</code> tab contains all copy for English, which each row representing a page. This copy uses a sample agency, called California State Transit (CST) with an Agency Card. This copy is used in Figma.</li> <li><code>forTranslation</code> and <code>All Agencies</code> tab contains the English and Spanish translation side by side, with agency-specific copy.</li> </ul>"},{"location":"product-and-design/copy-delivery/#copy-delivery-process-responsibilities","title":"Copy delivery process responsibilities","text":""},{"location":"product-and-design/copy-delivery/#product","title":"Product","text":"<ul> <li>Engage with product stakeholders to get the information necessary for copy writing.</li> <li>Engage with copy writers to get the English language copy drafted, proofed and ready for design.</li> <li>Engage with client editorial/communications team to ensure English language and Spanish language copy are edited according to client style guides.</li> <li>Engage all necessary stakeholders to get English language copy approved and ready for design.</li> <li>Compile copy in Cal-ITP Benefits Application Copy, ready to be used by Design, so Design can sync the spreadsheet to Figma.</li> <li>Engage with the translation agency, iBabbleOn, to get Spanish translations ready for Engineering.</li> <li>Transfer translations from iBabbleOn to the spreadsheet, in proper format.</li> <li>Ensure English and Spanish copy is ready for Engineering.</li> </ul>"},{"location":"product-and-design/copy-delivery/#design","title":"Design","text":"<ul> <li>Sync copy from Cal-ITP Benefits Application Copy into Figma.</li> <li>Ensure the string is in the appropriate column (e.g. <code>Subtitle</code>, <code>ButtonLabel</code>)</li> </ul>"},{"location":"product-and-design/copy-delivery/#engineering","title":"Engineering","text":"<ul> <li>Use copy from the English and Spanish language tabs of the spreadsheet, and turning it into code in <code>django.po</code> message files. Developer-specific instructions in the Django message files technical documentation.</li> <li>Ensure the messages accurately reflect the spreadsheet and Figma designs.</li> </ul>"},{"location":"product-and-design/copy-style/","title":"Copy terms and style","text":"<p>Use the following terms and style rules for Benefits application English and Spanish copy. Refer to the Cal-ITP Editorial Style Guide and Language Matters: Cal-ITP Terminology for further guidance.</p>"},{"location":"product-and-design/copy-style/#terms","title":"Terms","text":"Use English Spanish Do not use Usage agency card agency card tarjeta de agencia Agency Card (don\u2019t capitalize both words) benefit option benefit option opci\u00f3n de beneficio Cal-ITP California Integrated Travel Project California Integrated Travel Project (Proyecto Integrado de Viaje de California, o Cal-ITP por sus siglas en ingl\u00e9s) Cal-ITP Benefits Cal-ITP Benefits Cal-ITP Benefits Do not translate Cal-ITP Benefits California Department of Transportation California Department of Transportation Departamento de Transporte de California California Department of Technology California Department of Technology Departamento de Tecnolog\u00eda de California connects connects conecta contactless card contactless card tarjeta sin contacto payment card, cashless, tap-to-pay, touchless enroll enroll inscribirse apply enrollment process enrollment process proceso de inscripci\u00f3n GitHub GitHub GitHub Github Littlepay Littlepay Littlepay LittlePay Older Adult Older Adult adultos mayores Senior public transportation public transportation transporte p\u00fablico reduced fare reduced fare tarifa reducida discounted Social Security number Social Security number n\u00famero de Seguro Social social security number state-issued ID card state-issued ID card tarjeta de identificaci\u00f3n emitida por el estado driver\u2019s license tap to ride tap to ride toque para viajar transit agency transit agency agencia de tr\u00e1nsito bus agency, light rail agency, transit authority Refer to Language Matters: Cal-ITP Terminology transit benefit transit benefit beneficio de tr\u00e1nsito discount, fare discounts, reduced-fare \u201cOlder adult transit benefit\u201d, \u201cVeteran transit benefit\u201d transit provider transit provider proveedor de transporte US Veteran US Veteran Veterano de EE. UU. U.S. Veteran, US veteran Note: This currently goes against Cal-ITP Editorial Style Guide verify verify verifique"},{"location":"product-and-design/copy-style/#style","title":"Style","text":"Rule Examples Capitalization Always sentence-case body text, headlines, questions on Help page. Unable to confirm eligibility | Cal-ITP Benefits In English, names of pages are capitalized. Return Home Previous Page In Spanish, names of pages are not capitalized. Volver al inicio P\u00e1gina anterior Refer to Cal-ITP Editorial Style Guide Images, illustrations Always write an alt tag, unless Design determines the visual is purely decorative and has no substantive meaning. Links Never link to \u201chere\u201d. Use a descriptive title for the page. Tense For Spanish, use usted/formal case for all copy. Numbers Refer to Cal-ITP Editorial Style Guide Spacing Refer to Cal-ITP Editorial Style Guide Punctuation Refer to Cal-ITP Editorial Style Guide"},{"location":"product-and-design/use-cases/enrollment-use-cases/","title":"Enrollment use cases","text":"<p>The use cases documented on this page focus on how the system is supposed to work from the perspective of the end user.</p>"},{"location":"product-and-design/use-cases/enrollment-use-cases/#use-case-enroll-contactless-card-to-receive-transit-benefit","title":"Use case: Enroll contactless card to receive transit benefit","text":"<p>Primary Actor: Transit rider</p> <p>Systems: Benefits app, payment processor</p> <p>Preconditions:</p> <ul> <li>Transit rider has confirmed their eligibility with the Benefits app</li> <li>Transit rider has their contactless card information available</li> <li>Benefits app is able to contact the payment processor</li> </ul> <p>Trigger: Transit rider initiates the enrollment phase</p> <p>Basic flow:</p> <ol> <li>Transit rider enters their contactless card information</li> <li>Benefits app passes that information to the payment processor to enroll the card</li> <li>Payment processor successfully enrolls card</li> </ol> <p>Alternate flows:</p> <ul> <li> <p>3a. Payment processor returns with one of the following errors: card verification failed, token is invalid, or general server error</p> <ul> <li>3a1. Transit rider chooses to retry, starting back at initiating the enrollment phase</li> <li>3b1. Transit rider leaves the Benefits app</li> </ul> </li> </ul> <p>Postconditions:</p> <ul> <li>Transit rider\u2019s contactless card is enrolled to receive the transit benefit</li> </ul>"},{"location":"tests/automated-tests/","title":"Automated tests","text":""},{"location":"tests/automated-tests/#cypress","title":"Cypress","text":"<p>Feature and user interface tests are implemented with <code>cypress</code> and can be found in the <code>tests/cypress</code> directory in the repository.</p> <p>See the <code>cypress</code> Command Line guide for more information.</p>"},{"location":"tests/automated-tests/#running","title":"Running","text":"<p>These are instructions for running <code>cypress</code> locally on your machine, without the devcontainer. These steps will install <code>cypress</code> and its dependencies on your machine. Make sure to run these commands in a Terminal.</p> <ol> <li> <p>Ensure you have Node.js and NPM available on your local machine:</p> <pre><code>node -v\nnpm -v\n</code></pre> <p>If not, install Node.js locally.</p> </li> <li> <p>Start the local eligibility verification server:</p> <pre><code>docker compose up --detach server\n</code></pre> </li> <li> <p>Start the the application:</p> <pre><code>docker compose run --detach --service-ports client bin/test_start.sh\n</code></pre> </li> <li> <p>Change into the <code>cypress</code> directory:</p> <pre><code>cd tests/cypress\n</code></pre> </li> <li> <p>Install all packages and <code>cypress</code>. Verify <code>cypress</code> installation succeeds:</p> <pre><code>npm install\n</code></pre> </li> <li> <p>Run <code>cypress</code> with test environment variables and configuration variables:</p> <pre><code>CYPRESS_baseUrl=http://localhost:8000 npm run cypress:open\n</code></pre> </li> </ol> <p>See <code>tests/cypress/package.json</code> for more cypress scripts.</p> <p>As of Cypress 12.5.1 with Firefox 109, there is a CSRF issue that prevents the tests from passing; unclear if this is a bug in Cypress or what. Use one of the other browser options.</p>"},{"location":"tests/automated-tests/#pytest","title":"Pytest","text":"<p>The tests done at a request/unit level are run via pytest-django.</p> <p>To run locally, start the Devcontainer and run:</p> <pre><code>tests/pytest/run.sh\n</code></pre> <p>The helper script:</p> <ol> <li>Runs the tests with <code>pytest</code></li> <li>Calculates test coverage with <code>coverage</code></li> <li>Generates a <code>coverage</code> report in HTML in the app\u2019s <code>static/</code> directory</li> </ol> <p>The report can be viewed by launching the app and navigating to <code>http://localhost:$DJANGO_LOCAL_PORT/static/coverage/index.html</code></p> <p>The report files include a local <code>.gitignore</code> file, so the entire directory is hidden from source control.</p>"},{"location":"tests/automated-tests/#latest-coverage-report","title":"Latest coverage report","text":"<p>We also make the latest (from <code>dev</code>) coverage report available online here: Coverage report</p>"},{"location":"tests/manual-tests/","title":"Manual tests","text":"<p>This page lists manual testing scripts for various flows.</p>"},{"location":"tests/manual-tests/#getting-started-using-test-credentials","title":"Getting started: Using test credentials","text":"<p>In order to fully test the app, you will need to use test credentials, which are available here: Benefits Test Data.</p> <p>Important: Please do not use your personal accounts for Login.gov, ID.me, etc. to complete your review.</p>"},{"location":"tests/manual-tests/#logingov-and-veteran-confirmation-api","title":"Login.gov and Veteran Confirmation API","text":"<p>To test the Login.gov (Older adult) and Veteran Confirmation API (Veteran) enrollment pathway flows, you will need an e-mail address, a real cell phone and test account <code>yml</code> files from the Benefits Test Data document.</p> <p>Read the Login.gov Testing identity proofing documentation for complete instructions. In summary, once you click Get started with Login.gov, follow these instructions:</p> <ol> <li>Before you get started, download the <code>proofing-senior.yml</code> (or any other <code>yml</code> file for the specific user you are testing) from the Benefits Test Data document. For example, if you are testing the Veteran flow, or a non-senior flow, download the <code>proofing-veteran.yml</code> or <code>proofing-nonsenior.yml</code> files respectively.</li> <li>Click Create an account.</li> <li>Create a test email address, like <code>yourname+older_adult@compiler.la</code>. Gmail supports adding suffixes to your email address.</li> <li>Select English (default) and check I read and accept the Login.gov Rules of Use.</li> <li>Check your email for a confirmation link and click it.</li> <li>Go through the password and authentication method setup flows. Make sure to select Text or voice message. Selecting Backup codes is useful if you plan to use this account again. Make sure to save your password, as you will need to enter it at the very end.</li> <li>Enter your real cell phone number.</li> <li>Check your text messages for a message from Login.gov. The message should specify <code>idp.int.identitysandbox.gov</code>.</li> <li>Enter the code into the browser.</li> <li>Save the backup codes, if selected.</li> <li>Click Continue until you reach the <code>How would you like to add your ID?</code> part of the flow.</li> <li>Click Upload photos.</li> <li>Upload the <code>.yml</code> files you downloaded in the first step for both the front and back of the ID. Click Continue.</li> <li>For Enter your Social Security number, enter a number that starts with <code>900</code> or <code>666</code>. DO NOT ENTER YOUR PERSONAL SOCIAL SECURITY NUMBER.</li> <li>At this point, the Verify your information page should show the data you have in the <code>.yml</code> file you uploaded. Double-check that the age (date of birth) is accurate.</li> <li>Verify your phone again.</li> <li>Re-enter your password. You should be redirected back to the Benefits application.</li> </ol>"},{"location":"tests/manual-tests/#agency-cards","title":"Agency cards","text":"<p>To test the agency card enrollment pathway, use the following test credentials:</p> <ul> <li>Courtesy Cards (MST)</li> <li>Reduced Fare Mobility ID (SBMTD)</li> </ul>"},{"location":"tests/manual-tests/#littlepay","title":"Littlepay","text":"<p>To test the Littlepay card enrollment flow, use the test Visa credentials in the Benefits Test Data document, along with any fake name, any CVV and an expiration date in the future.</p>"},{"location":"tests/manual-tests/#keyboard-testing","title":"Keyboard testing","text":"<p>Keyboard testing refers to test the app on a desktop/laptop machine without using a mouse/trackpad. To do so, use Tab to focus on a button or link, and Enter to select a button or link.</p> <p>Make sure:</p> <ul> <li>All links and buttons have a visible indication that the targeted item is focused.</li> <li>All modals close by pressing Escape.</li> <li>The skip nav, a link with the text <code>Skip to main content</code> / <code>Saltar al contenido principal</code> should appear on the first tab press.</li> </ul>"},{"location":"tests/manual-tests/#spanish-translation-testing","title":"Spanish translation testing","text":"<ol> <li>Open the test environment Benefits application in the test environment using a supported browser.</li> <li>Click the Espa\u00f1ol button on the right side of the application header, to switch the application language to Spanish.</li> <li>Click Elija su Proveedor and choose Monterey-Salinas Transit as your transit agency.</li> <li>Follow the Adulto mayor / Older adult enrollment pathway to completion using test data. You will need a cell phone, a test Login.gov account and test Littlepay card credentials.</li> <li>Follow the Veterano de EE. UU. / Veterans enrollment pathway to completion using test data. You will need a cell phone, a test Login.gov account and test Littlepay card credentials.</li> <li>Follow the Tarjeta de cortes\u00eda de MST / Courtesy Card pathway to completion using test data. You will need test Courtesy Card credentials and test Littlepay card credentials.</li> <li>Click Ayuda in the footer to review the Help page.</li> <li>Jot down any issues or notes during the review. Highlight any proposed changes on the forTranslation tab in the Cal-ITP Benefits Application Copy spreadsheet. Use the comment feature in Google Sheets to share your feedback. Please mention Andy Walker and Machiko Yasuda in each comment.</li> </ol>"}]}